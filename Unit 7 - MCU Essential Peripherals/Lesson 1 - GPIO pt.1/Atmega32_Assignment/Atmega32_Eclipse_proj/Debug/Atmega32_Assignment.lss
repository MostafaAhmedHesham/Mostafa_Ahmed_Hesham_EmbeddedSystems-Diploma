
Atmega32_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000588  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000005c9  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
  one more press to reset system  */
void Button_LEDS_BUZZER(void);


int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	GPIO_init();
  74:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_init>

	//Sequential_LEDS();
	Button_LEDS_BUZZER();
  78:	0e 94 7c 00 	call	0xf8	; 0xf8 <Button_LEDS_BUZZER>


	return 0;
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
}
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	08 95       	ret

00000086 <GPIO_init>:


void GPIO_init(void)
{
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	// Set PORTD Pin 4, 5, 6, 7 to be output
	DDRD |= (0b1111 << 4);
  8e:	a1 e3       	ldi	r26, 0x31	; 49
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e1 e3       	ldi	r30, 0x31	; 49
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	91 81       	ldd	r25, Z+1	; 0x01
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	9c 93       	st	X, r25
  a0:	8e 93       	st	-X, r24

	// Set PORTD Pin 0 to be input
	DDRD &= ~(1 << 0);
  a2:	a1 e3       	ldi	r26, 0x31	; 49
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	91 81       	ldd	r25, Z+1	; 0x01
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	9c 93       	st	X, r25
  b4:	8e 93       	st	-X, r24
}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <my_delay>:

void my_delay(uint8_t delay_cycles)
{
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	00 d0       	rcall	.+0      	; 0xc2 <my_delay+0x6>
  c2:	0f 92       	push	r0
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8_t i = 0 ; i < delay_cycles ; i++)
  ca:	1a 82       	std	Y+2, r1	; 0x02
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <my_delay+0x28>
		for(uint8_t j = 0 ; j < 255 ; j++);
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <my_delay+0x1c>
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	d1 f7       	brne	.-12     	; 0xd2 <my_delay+0x16>
	DDRD &= ~(1 << 0);
}

void my_delay(uint8_t delay_cycles)
{
	for(uint8_t i = 0 ; i < delay_cycles ; i++)
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	8a 83       	std	Y+2, r24	; 0x02
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	98 17       	cp	r25, r24
  ea:	88 f3       	brcs	.-30     	; 0xce <my_delay+0x12>
		for(uint8_t j = 0 ; j < 255 ; j++);
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <Button_LEDS_BUZZER>:


void Button_LEDS_BUZZER(void)
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	uint8_t flag = 0;
 102:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		if (	((PIND & (1 << 0)) >> 0) == 1 && flag == 0)
 104:	e0 e3       	ldi	r30, 0x30	; 48
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	90 70       	andi	r25, 0x00	; 0
 110:	88 23       	and	r24, r24
 112:	c1 f0       	breq	.+48     	; 0x144 <Button_LEDS_BUZZER+0x4c>
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	88 23       	and	r24, r24
 118:	a9 f4       	brne	.+42     	; 0x144 <Button_LEDS_BUZZER+0x4c>
		{
			PORTD |= LED1;
 11a:	a2 e3       	ldi	r26, 0x32	; 50
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e2 e3       	ldi	r30, 0x32	; 50
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
 126:	80 62       	ori	r24, 0x20	; 32
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	9c 93       	st	X, r25
 12c:	8e 93       	st	-X, r24
			flag++;
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	89 83       	std	Y+1, r24	; 0x01
			while((PIND & (1 << 0)) >> 0);
 134:	e0 e3       	ldi	r30, 0x30	; 48
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	90 70       	andi	r25, 0x00	; 0
 140:	88 23       	and	r24, r24
 142:	c1 f7       	brne	.-16     	; 0x134 <Button_LEDS_BUZZER+0x3c>
		}

		if (	((PIND & (1 << 0)) >> 0) == 1 && flag == 1)
 144:	e0 e3       	ldi	r30, 0x30	; 48
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	88 23       	and	r24, r24
 152:	11 f1       	breq	.+68     	; 0x198 <Button_LEDS_BUZZER+0xa0>
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	f9 f4       	brne	.+62     	; 0x198 <Button_LEDS_BUZZER+0xa0>
		{
			PORTD |= LED1;
 15a:	a2 e3       	ldi	r26, 0x32	; 50
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e2 e3       	ldi	r30, 0x32	; 50
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	80 62       	ori	r24, 0x20	; 32
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	9c 93       	st	X, r25
 16c:	8e 93       	st	-X, r24
			PORTD |= LED2;
 16e:	a2 e3       	ldi	r26, 0x32	; 50
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e2 e3       	ldi	r30, 0x32	; 50
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	9c 93       	st	X, r25
 180:	8e 93       	st	-X, r24
			flag++;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	89 83       	std	Y+1, r24	; 0x01
			while((PIND & (1 << 0)) >> 0);
 188:	e0 e3       	ldi	r30, 0x30	; 48
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	81 70       	andi	r24, 0x01	; 1
 192:	90 70       	andi	r25, 0x00	; 0
 194:	88 23       	and	r24, r24
 196:	c1 f7       	brne	.-16     	; 0x188 <Button_LEDS_BUZZER+0x90>
		}

		if (	((PIND & (1 << 0)) >> 0) == 1 && flag == 2)
 198:	e0 e3       	ldi	r30, 0x30	; 48
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	88 23       	and	r24, r24
 1a6:	61 f1       	breq	.+88     	; 0x200 <Button_LEDS_BUZZER+0x108>
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	49 f5       	brne	.+82     	; 0x200 <Button_LEDS_BUZZER+0x108>
		{
			PORTD |= LED1;
 1ae:	a2 e3       	ldi	r26, 0x32	; 50
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e2 e3       	ldi	r30, 0x32	; 50
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	9c 93       	st	X, r25
 1c0:	8e 93       	st	-X, r24
			PORTD |= LED2;
 1c2:	a2 e3       	ldi	r26, 0x32	; 50
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e2 e3       	ldi	r30, 0x32	; 50
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	9c 93       	st	X, r25
 1d4:	8e 93       	st	-X, r24
			PORTD |= LED3;
 1d6:	a2 e3       	ldi	r26, 0x32	; 50
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e2 e3       	ldi	r30, 0x32	; 50
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	11 96       	adiw	r26, 0x01	; 1
 1e6:	9c 93       	st	X, r25
 1e8:	8e 93       	st	-X, r24
			flag++;
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	89 83       	std	Y+1, r24	; 0x01
			while((PIND & (1 << 0)) >> 0);
 1f0:	e0 e3       	ldi	r30, 0x30	; 48
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	91 81       	ldd	r25, Z+1	; 0x01
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	90 70       	andi	r25, 0x00	; 0
 1fc:	88 23       	and	r24, r24
 1fe:	c1 f7       	brne	.-16     	; 0x1f0 <Button_LEDS_BUZZER+0xf8>
		}

		if (	((PIND & (1 << 0)) >> 0) == 1 && flag == 3)
 200:	e0 e3       	ldi	r30, 0x30	; 48
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	90 70       	andi	r25, 0x00	; 0
 20c:	88 23       	and	r24, r24
 20e:	e1 f0       	breq	.+56     	; 0x248 <Button_LEDS_BUZZER+0x150>
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	c9 f4       	brne	.+50     	; 0x248 <Button_LEDS_BUZZER+0x150>
		{
			RESET_PORTD;
 216:	e2 e3       	ldi	r30, 0x32	; 50
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	11 82       	std	Z+1, r1	; 0x01
 21c:	10 82       	st	Z, r1
			PORTD |= BUZZER;
 21e:	a2 e3       	ldi	r26, 0x32	; 50
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e2 e3       	ldi	r30, 0x32	; 50
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
			flag++;
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	89 83       	std	Y+1, r24	; 0x01
			while((PIND & (1 << 0)) >> 0);
 238:	e0 e3       	ldi	r30, 0x30	; 48
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	91 81       	ldd	r25, Z+1	; 0x01
 240:	81 70       	andi	r24, 0x01	; 1
 242:	90 70       	andi	r25, 0x00	; 0
 244:	88 23       	and	r24, r24
 246:	c1 f7       	brne	.-16     	; 0x238 <Button_LEDS_BUZZER+0x140>
		}
		if (	((PIND & (1 << 0)) >> 0) == 1 && flag == 4)
 248:	e0 e3       	ldi	r30, 0x30	; 48
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	81 70       	andi	r24, 0x01	; 1
 252:	90 70       	andi	r25, 0x00	; 0
 254:	88 23       	and	r24, r24
 256:	09 f4       	brne	.+2      	; 0x25a <Button_LEDS_BUZZER+0x162>
 258:	55 cf       	rjmp	.-342    	; 0x104 <Button_LEDS_BUZZER+0xc>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	09 f0       	breq	.+2      	; 0x262 <Button_LEDS_BUZZER+0x16a>
 260:	51 cf       	rjmp	.-350    	; 0x104 <Button_LEDS_BUZZER+0xc>
		{
			flag = 0;
 262:	19 82       	std	Y+1, r1	; 0x01
			RESET_PORTD;
 264:	e2 e3       	ldi	r30, 0x32	; 50
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	11 82       	std	Z+1, r1	; 0x01
 26a:	10 82       	st	Z, r1
			while((PIND & (1 << 0)) >> 0);
 26c:	e0 e3       	ldi	r30, 0x30	; 48
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	81 70       	andi	r24, 0x01	; 1
 276:	90 70       	andi	r25, 0x00	; 0
 278:	88 23       	and	r24, r24
 27a:	c1 f7       	brne	.-16     	; 0x26c <Button_LEDS_BUZZER+0x174>
 27c:	43 cf       	rjmp	.-378    	; 0x104 <Button_LEDS_BUZZER+0xc>

0000027e <Sequential_LEDS>:
		}
	}
}

void Sequential_LEDS(void)
{
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		PORTD |= LED1;
 286:	a2 e3       	ldi	r26, 0x32	; 50
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e2 e3       	ldi	r30, 0x32	; 50
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	80 62       	ori	r24, 0x20	; 32
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	9c 93       	st	X, r25
 298:	8e 93       	st	-X, r24
		my_delay(1);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 5e 00 	call	0xbc	; 0xbc <my_delay>
		RESET_PORTD;
 2a0:	e2 e3       	ldi	r30, 0x32	; 50
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	11 82       	std	Z+1, r1	; 0x01
 2a6:	10 82       	st	Z, r1

		PORTD |= LED2;
 2a8:	a2 e3       	ldi	r26, 0x32	; 50
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e2 e3       	ldi	r30, 0x32	; 50
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	9c 93       	st	X, r25
 2ba:	8e 93       	st	-X, r24
		my_delay(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 5e 00 	call	0xbc	; 0xbc <my_delay>
		RESET_PORTD;
 2c2:	e2 e3       	ldi	r30, 0x32	; 50
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	11 82       	std	Z+1, r1	; 0x01
 2c8:	10 82       	st	Z, r1

		PORTD |= LED3;
 2ca:	a2 e3       	ldi	r26, 0x32	; 50
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e2 e3       	ldi	r30, 0x32	; 50
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	11 96       	adiw	r26, 0x01	; 1
 2da:	9c 93       	st	X, r25
 2dc:	8e 93       	st	-X, r24
		my_delay(1);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 5e 00 	call	0xbc	; 0xbc <my_delay>
		RESET_PORTD;
 2e4:	e2 e3       	ldi	r30, 0x32	; 50
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	11 82       	std	Z+1, r1	; 0x01
 2ea:	10 82       	st	Z, r1

		PORTD |= BUZZER;
 2ec:	a2 e3       	ldi	r26, 0x32	; 50
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e2 e3       	ldi	r30, 0x32	; 50
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	91 81       	ldd	r25, Z+1	; 0x01
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	9c 93       	st	X, r25
 2fe:	8e 93       	st	-X, r24
		my_delay(5);
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	0e 94 5e 00 	call	0xbc	; 0xbc <my_delay>
		RESET_PORTD;
 306:	e2 e3       	ldi	r30, 0x32	; 50
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	11 82       	std	Z+1, r1	; 0x01
 30c:	10 82       	st	Z, r1
 30e:	bb cf       	rjmp	.-138    	; 0x286 <Sequential_LEDS+0x8>

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
