
Lab1_CubeIDE_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000014d  00000000  00000000  000103b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000cb  00000000  00000000  00010506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000110  00000000  00000000  000105d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000106e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001960  00000000  00000000  00010790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006c8  00000000  00000000  000120f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006f4b  00000000  00000000  000127b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019703  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  00019754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000370 	.word	0x08000370

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000370 	.word	0x08000370

08000170 <clock_init>:
#define GPIOB_IDR *(vuint32_t *)(GPIO_PORTB_BASE + 0x08)
#define GPIOB_ODR *(vuint32_t *)(GPIO_PORTB_BASE + 0x0C)


void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable PORTA and PORTB
	RCC_APB2ENR |= RCC_PORTA;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= RCC_PORTB;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	//Configure PORTA pin1 & pin13 to be Floating Input
	//Pin1
	GPIOA_CRL &= (0b0000 << 4);		// Clear Bits 4 ~ 7
 800019c:	4b23      	ldr	r3, [pc, #140]	; (800022c <GPIO_init+0x94>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4b22      	ldr	r3, [pc, #136]	; (800022c <GPIO_init+0x94>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
	GPIOA_CRL &= ~(0b11 << 4);		// MODE1[1:0] = 00
 80001a6:	4b21      	ldr	r3, [pc, #132]	; (800022c <GPIO_init+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a20      	ldr	r2, [pc, #128]	; (800022c <GPIO_init+0x94>)
 80001ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001b0:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b01 << 6);		// CNF1[1:0] = 01  Floating input (reset state)
 80001b2:	4b1e      	ldr	r3, [pc, #120]	; (800022c <GPIO_init+0x94>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a1d      	ldr	r2, [pc, #116]	; (800022c <GPIO_init+0x94>)
 80001b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001bc:	6013      	str	r3, [r2, #0]
	//Pin13
	GPIOA_CRH &= (0b0000 << 20);	// Clear Bits 20 ~ 23
 80001be:	4b1c      	ldr	r3, [pc, #112]	; (8000230 <GPIO_init+0x98>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <GPIO_init+0x98>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
	GPIOA_CRH &= ~(0b11 << 20);		// MODE13[1:0] = 00 input mode
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <GPIO_init+0x98>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a18      	ldr	r2, [pc, #96]	; (8000230 <GPIO_init+0x98>)
 80001ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01 << 22);		// CNF13[1:0] = 01  Floating input (reset state)
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <GPIO_init+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a15      	ldr	r2, [pc, #84]	; (8000230 <GPIO_init+0x98>)
 80001da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001de:	6013      	str	r3, [r2, #0]

	//Configure PORTB pin1 & pin13 to be Output Push-Pull with 10MHz Speed
	//Pin1
	GPIOB_CRL &= (0b0000 << 4);		// Clear Bits 4 ~ 7
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <GPIO_init+0x9c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <GPIO_init+0x9c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
	GPIOB_CRL |= (0b01 << 4);		// MODE1[1:0] = 01 Output mode, max speed 10 MHz
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <GPIO_init+0x9c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a11      	ldr	r2, [pc, #68]	; (8000234 <GPIO_init+0x9c>)
 80001f0:	f043 0310 	orr.w	r3, r3, #16
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(0b11 << 6);		// CNF1[1:0] = 00  push-pull
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <GPIO_init+0x9c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <GPIO_init+0x9c>)
 80001fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000200:	6013      	str	r3, [r2, #0]
	//Pin13
	GPIOB_CRH &= (0b0000 << 20);	// Clear Bits 20 ~ 23
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <GPIO_init+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <GPIO_init+0xa0>)
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
	GPIOB_CRH |= (0b01 << 20);		// MODE13[1:0] = 01 Output mode, max speed 10 MHz
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <GPIO_init+0xa0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <GPIO_init+0xa0>)
 8000212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000216:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11 << 22);		// CNF13[1:0] = 00  push-pull
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <GPIO_init+0xa0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <GPIO_init+0xa0>)
 800021e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40010800 	.word	0x40010800
 8000230:	40010804 	.word	0x40010804
 8000234:	40010c00 	.word	0x40010c00
 8000238:	40010c04 	.word	0x40010c04

0800023c <my_wait>:

void my_wait(int x)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	uint32 i,j;
	for(i = 0 ; i < x ; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00b      	b.n	8000262 <my_wait+0x26>
		for(j = 0 ; j < 255 ; j++);
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	e002      	b.n	8000256 <my_wait+0x1a>
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	3301      	adds	r3, #1
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2bfe      	cmp	r3, #254	; 0xfe
 800025a:	d9f9      	bls.n	8000250 <my_wait+0x14>
	for(i = 0 ; i < x ; i++)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	429a      	cmp	r2, r3
 8000268:	d3ef      	bcc.n	800024a <my_wait+0xe>
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
	...

08000278 <main>:


int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	clock_init();
 800027c:	f7ff ff78 	bl	8000170 <clock_init>
	GPIO_init();
 8000280:	f7ff ff8a 	bl	8000198 <GPIO_init>

	while(1){
			// PA1 is Connected PUR so it's 1 by default
			if ( ((GPIOA_IDR & (1 << 1)) >> 1) == 0 ) //Reading 0 means the button is pressed
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0x54>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f003 0302 	and.w	r3, r3, #2
 800028c:	2b00      	cmp	r3, #0
 800028e:	d10c      	bne.n	80002aa <main+0x32>
			{
				GPIOB_ODR ^= (1 << 1);	//Toggle PB1
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <main+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <main+0x58>)
 8000296:	f083 0302 	eor.w	r3, r3, #2
 800029a:	6013      	str	r3, [r2, #0]
				while ( ((GPIOA_IDR & (1 << 1)) >> 1) == 0 ); // Single Press: Fix your state by staying in loop if button is pressed
 800029c:	bf00      	nop
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x54>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 0302 	and.w	r3, r3, #2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <main+0x26>
			}
			if ( ((GPIOA_IDR & (1 << 13)) >> 13) == 1 ) //Reading 1 means the button is pressed
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0x54>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	0b5b      	lsrs	r3, r3, #13
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d105      	bne.n	80002c4 <main+0x4c>
				GPIOB_ODR ^= (1 << 13);	// Multiple Press: Keep Toggling if button is pressed
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <main+0x58>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <main+0x58>)
 80002be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002c2:	6013      	str	r3, [r2, #0]

			my_wait(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f7ff ffb9 	bl	800023c <my_wait>
			if ( ((GPIOA_IDR & (1 << 1)) >> 1) == 0 ) //Reading 0 means the button is pressed
 80002ca:	e7db      	b.n	8000284 <main+0xc>
 80002cc:	40010808 	.word	0x40010808
 80002d0:	40010c0c 	.word	0x40010c0c

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ffb7 	bl	8000278 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	; (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	f000 f81a 	bl	8000370 <_init>
 800033c:	2600      	movs	r6, #0
 800033e:	4d0a      	ldr	r5, [pc, #40]	; (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
