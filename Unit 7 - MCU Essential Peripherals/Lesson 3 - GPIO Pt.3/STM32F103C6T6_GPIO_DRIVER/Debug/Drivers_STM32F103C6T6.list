
Drivers_STM32F103C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  4 .ARM          00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000620  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000620  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000830  00000000  00000000  00010649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002d4  00000000  00000000  00010e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000044c  00000000  00000000  0001114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000115a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00011660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b99  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f00  00000000  00000000  00013291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000075c9  00000000  00000000  00014191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001b75a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001b7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000600 	.word	0x08000600

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000600 	.word	0x08000600

08000170 <Get_CRLH_Position>:
 *  Created on: Oct 19, 2023
 *      Author: AEMYS
 */
#include "STM32F103C6T6_GPIO_Driver.h"
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000180:	f000 80a5 	beq.w	80002ce <Get_CRLH_Position+0x15e>
 8000184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000188:	f300 80a3 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800018c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000190:	f000 809b 	beq.w	80002ca <Get_CRLH_Position+0x15a>
 8000194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000198:	f300 809b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800019c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a0:	f000 8091 	beq.w	80002c6 <Get_CRLH_Position+0x156>
 80001a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a8:	f300 8093 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b0:	f000 8087 	beq.w	80002c2 <Get_CRLH_Position+0x152>
 80001b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b8:	f300 808b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c0:	d07d      	beq.n	80002be <Get_CRLH_Position+0x14e>
 80001c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c6:	f300 8084 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001ce:	d074      	beq.n	80002ba <Get_CRLH_Position+0x14a>
 80001d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001d4:	dc7d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001da:	d06c      	beq.n	80002b6 <Get_CRLH_Position+0x146>
 80001dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001e0:	dc77      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001e6:	d064      	beq.n	80002b2 <Get_CRLH_Position+0x142>
 80001e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ec:	dc71      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001ee:	2b80      	cmp	r3, #128	; 0x80
 80001f0:	d05d      	beq.n	80002ae <Get_CRLH_Position+0x13e>
 80001f2:	2b80      	cmp	r3, #128	; 0x80
 80001f4:	dc6d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001f6:	2b20      	cmp	r3, #32
 80001f8:	dc48      	bgt.n	800028c <Get_CRLH_Position+0x11c>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	dd69      	ble.n	80002d2 <Get_CRLH_Position+0x162>
 80001fe:	3b01      	subs	r3, #1
 8000200:	2b1f      	cmp	r3, #31
 8000202:	d866      	bhi.n	80002d2 <Get_CRLH_Position+0x162>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <Get_CRLH_Position+0x9c>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	08000293 	.word	0x08000293
 8000210:	08000297 	.word	0x08000297
 8000214:	080002d3 	.word	0x080002d3
 8000218:	0800029b 	.word	0x0800029b
 800021c:	080002d3 	.word	0x080002d3
 8000220:	080002d3 	.word	0x080002d3
 8000224:	080002d3 	.word	0x080002d3
 8000228:	0800029f 	.word	0x0800029f
 800022c:	080002d3 	.word	0x080002d3
 8000230:	080002d3 	.word	0x080002d3
 8000234:	080002d3 	.word	0x080002d3
 8000238:	080002d3 	.word	0x080002d3
 800023c:	080002d3 	.word	0x080002d3
 8000240:	080002d3 	.word	0x080002d3
 8000244:	080002d3 	.word	0x080002d3
 8000248:	080002a3 	.word	0x080002a3
 800024c:	080002d3 	.word	0x080002d3
 8000250:	080002d3 	.word	0x080002d3
 8000254:	080002d3 	.word	0x080002d3
 8000258:	080002d3 	.word	0x080002d3
 800025c:	080002d3 	.word	0x080002d3
 8000260:	080002d3 	.word	0x080002d3
 8000264:	080002d3 	.word	0x080002d3
 8000268:	080002d3 	.word	0x080002d3
 800026c:	080002d3 	.word	0x080002d3
 8000270:	080002d3 	.word	0x080002d3
 8000274:	080002d3 	.word	0x080002d3
 8000278:	080002d3 	.word	0x080002d3
 800027c:	080002d3 	.word	0x080002d3
 8000280:	080002d3 	.word	0x080002d3
 8000284:	080002d3 	.word	0x080002d3
 8000288:	080002a7 	.word	0x080002a7
 800028c:	2b40      	cmp	r3, #64	; 0x40
 800028e:	d00c      	beq.n	80002aa <Get_CRLH_Position+0x13a>
 8000290:	e01f      	b.n	80002d2 <Get_CRLH_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 8000292:	2300      	movs	r3, #0
 8000294:	e01e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000296:	2304      	movs	r3, #4
 8000298:	e01c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800029a:	2308      	movs	r3, #8
 800029c:	e01a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800029e:	230c      	movs	r3, #12
 80002a0:	e018      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80002a2:	2310      	movs	r3, #16
 80002a4:	e016      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80002a6:	2314      	movs	r3, #20
 80002a8:	e014      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80002aa:	2318      	movs	r3, #24
 80002ac:	e012      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80002ae:	231c      	movs	r3, #28
 80002b0:	e010      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e00e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80002b6:	2304      	movs	r3, #4
 80002b8:	e00c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80002ba:	2308      	movs	r3, #8
 80002bc:	e00a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80002be:	230c      	movs	r3, #12
 80002c0:	e008      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80002c2:	2310      	movs	r3, #16
 80002c4:	e006      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80002c6:	2314      	movs	r3, #20
 80002c8:	e004      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80002ca:	2318      	movs	r3, #24
 80002cc:	e002      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80002ce:	231c      	movs	r3, #28
 80002d0:	e000      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note-			-stm32f103c8t6 has ports A,B,C,D,E but only there is a pins for
 * 					ports A,B and a few pins from C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Pins from 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Pins from 8 >>> 15
	volatile uint32_t* config_register = NULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	73fb      	strb	r3, [r7, #15]

	//A pointer to carry register to  be configured
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &(GPIOx->CRL):&(GPIOx->CRH);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2bff      	cmp	r3, #255	; 0xff
 80002f8:	d801      	bhi.n	80002fe <MCAL_GPIO_Init+0x1e>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	e001      	b.n	8000302 <MCAL_GPIO_Init+0x22>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] and MODEy[1:0]
	*config_register &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff31 	bl	8000170 <Get_CRLH_Position>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4093      	lsls	r3, r2
 8000316:	43da      	mvns	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	401a      	ands	r2, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	601a      	str	r2, [r3, #0]
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD))
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b06      	cmp	r3, #6
 8000328:	d00b      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	2b07      	cmp	r3, #7
 8000330:	d007      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	2b04      	cmp	r3, #4
 8000338:	d003      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	2b05      	cmp	r3, #5
 8000340:	d10e      	bne.n	8000360 <MCAL_GPIO_Init+0x80>
		{
			//Set CNFy[1:0] and MODEy[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F );
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	3b04      	subs	r3, #4
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	b25a      	sxtb	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	b25b      	sxtb	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e02c      	b.n	80003ba <MCAL_GPIO_Init+0xda>
		}
	//If Pin is input MODE = 00 Input Mode (Reset state)
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	789b      	ldrb	r3, [r3, #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <MCAL_GPIO_Init+0x90>
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	789b      	ldrb	r3, [r3, #2]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d107      	bne.n	8000380 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0F );
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	789b      	ldrb	r3, [r3, #2]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	f003 030f 	and.w	r3, r3, #15
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e01c      	b.n	80003ba <MCAL_GPIO_Init+0xda>
		}
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	789b      	ldrb	r3, [r3, #2]
 8000384:	2b08      	cmp	r3, #8
 8000386:	d102      	bne.n	800038e <MCAL_GPIO_Init+0xae>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x00) & 0x0F ); //Consider it as input floating
 8000388:	2304      	movs	r3, #4
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e015      	b.n	80003ba <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x00) & 0x0F );
 800038e:	2308      	movs	r3, #8
 8000390:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	789b      	ldrb	r3, [r3, #2]
 8000396:	2b02      	cmp	r3, #2
 8000398:	d107      	bne.n	80003aa <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	8812      	ldrh	r2, [r2, #0]
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	e007      	b.n	80003ba <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	8812      	ldrh	r2, [r2, #0]
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	60da      	str	r2, [r3, #12]
			}
		}

	}
	(*config_register) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80003ba:	7bfc      	ldrb	r4, [r7, #15]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fed5 	bl	8000170 <Get_CRLH_Position>
 80003c6:	4603      	mov	r3, r0
 80003c8:	fa04 f203 	lsl.w	r2, r4, r3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	601a      	str	r2, [r3, #0]

}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd90      	pop	{r4, r7, pc}

080003de <MCAL_GPIO_ReadPin>:
 * @param [in]	-PinNumber: set pin according to @ref GPIO_PINS_define
 * @retval 		-The Input Pin Value (Two Values based @ref GPIO_PIN_STATE)
 * Note-			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx,uint16_t PinNumber)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	460b      	mov	r3, r1
 80003e8:	807b      	strh	r3, [r7, #2]
	uint8_t pin_status;
	if (((GPIOx->IDR) & ((uint32_t)PinNumber)) != (uint32_t)GPIO_PIN_RESET )
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	887b      	ldrh	r3, [r7, #2]
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <MCAL_GPIO_ReadPin+0x1e>
		pin_status = GPIO_PIN_SET;
 80003f6:	2301      	movs	r3, #1
 80003f8:	73fb      	strb	r3, [r7, #15]
 80003fa:	e001      	b.n	8000400 <MCAL_GPIO_ReadPin+0x22>
	else
		pin_status = GPIO_PIN_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
	return pin_status;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <MCAL_GPIO_TogglePin>:
 * @param [in]	-PinNumber: set pin according to @ref GPIO_PINS_define
 * @retval 		-none
 * Note-			-none
 */
void MCAL_GPIO_TogglePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=(PinNumber);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	405a      	eors	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	60da      	str	r2, [r3, #12]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <clock_init>:
 */
#include "STM32F103C6T6.h"
#include "STM32F103C6T6_GPIO_Driver.h"

void clock_init(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	/*Enable Clock For GBIOA and GPIOB*/
	//RCC->APB2ENR |= (0b11<2);

	RCC_GPIOA_CLK_EN();
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <clock_init+0x24>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a06      	ldr	r2, [pc, #24]	; (8000454 <clock_init+0x24>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <clock_init+0x24>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a03      	ldr	r2, [pc, #12]	; (8000454 <clock_init+0x24>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000

08000458 <GPIO_init>:

void GPIO_init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
	//Configure PORTA pin1 & pin13 to be Floating Input
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800045e:	2301      	movs	r3, #1
 8000460:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000466:	2302      	movs	r3, #2
 8000468:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4815      	ldr	r0, [pc, #84]	; (80004c4 <GPIO_init+0x6c>)
 8000470:	f7ff ff36 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000474:	2301      	movs	r3, #1
 8000476:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000480:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <GPIO_init+0x6c>)
 8000488:	f7ff ff2a 	bl	80002e0 <MCAL_GPIO_Init>


	//Configure PORTB pin1 & pin13 to be Output Push-Pull with 10MHz Speed
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800048c:	2304      	movs	r3, #4
 800048e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000490:	2301      	movs	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000494:	2302      	movs	r3, #2
 8000496:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <GPIO_init+0x70>)
 800049e:	f7ff ff1f 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a2:	2304      	movs	r3, #4
 80004a4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80004a6:	2301      	movs	r3, #1
 80004a8:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80004aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ae:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <GPIO_init+0x70>)
 80004b6:	f7ff ff13 	bl	80002e0 <MCAL_GPIO_Init>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40010800 	.word	0x40010800
 80004c8:	40010c00 	.word	0x40010c00

080004cc <my_wait>:

void my_wait(int x)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0 ; i < x ; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e00b      	b.n	80004f2 <my_wait+0x26>
		for(j = 0 ; j < 255 ; j++);
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	e002      	b.n	80004e6 <my_wait+0x1a>
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2bfe      	cmp	r3, #254	; 0xfe
 80004ea:	d9f9      	bls.n	80004e0 <my_wait+0x14>
	for(i = 0 ; i < x ; i++)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d3ef      	bcc.n	80004da <my_wait+0xe>
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <main>:

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	clock_init();
 800050c:	f7ff ff90 	bl	8000430 <clock_init>
	GPIO_init();
 8000510:	f7ff ffa2 	bl	8000458 <GPIO_init>

	while(1)
	{
			// PA1 is Connected PUR so it's 1 by default
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) //Reading 0 means the button is pressed
 8000514:	2102      	movs	r1, #2
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <main+0x54>)
 8000518:	f7ff ff61 	bl	80003de <MCAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10b      	bne.n	800053a <main+0x32>
			{
				MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);	//Toggle PB1
 8000522:	2102      	movs	r1, #2
 8000524:	480e      	ldr	r0, [pc, #56]	; (8000560 <main+0x58>)
 8000526:	f7ff ff71 	bl	800040c <MCAL_GPIO_TogglePin>
				while (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); // Single Press: Fix your state by staying in loop if button is pressed
 800052a:	bf00      	nop
 800052c:	2102      	movs	r1, #2
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <main+0x54>)
 8000530:	f7ff ff55 	bl	80003de <MCAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f8      	beq.n	800052c <main+0x24>
			}
			// PA1 is Connected PDR so it's 0 by default
			if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1 ) //Reading 1 means the button is pressed
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x54>)
 8000540:	f7ff ff4d 	bl	80003de <MCAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d104      	bne.n	8000554 <main+0x4c>
				MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);	// Multiple Press: Keep Toggling if button is pressed
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x58>)
 8000550:	f7ff ff5c 	bl	800040c <MCAL_GPIO_TogglePin>

			my_wait(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffb9 	bl	80004cc <my_wait>
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) //Reading 0 means the button is pressed
 800055a:	e7db      	b.n	8000514 <main+0xc>
 800055c:	40010800 	.word	0x40010800
 8000560:	40010c00 	.word	0x40010c00

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 f811 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff ffb7 	bl	8000508 <main>

0800059a <LoopForever>:

LoopForever:
  b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   r0, =_estack
 800059c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	08000620 	.word	0x08000620
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2600      	movs	r6, #0
 80005bc:	4d0c      	ldr	r5, [pc, #48]	; (80005f0 <__libc_init_array+0x38>)
 80005be:	4c0d      	ldr	r4, [pc, #52]	; (80005f4 <__libc_init_array+0x3c>)
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	10a4      	asrs	r4, r4, #2
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	f000 f81a 	bl	8000600 <_init>
 80005cc:	2600      	movs	r6, #0
 80005ce:	4d0a      	ldr	r5, [pc, #40]	; (80005f8 <__libc_init_array+0x40>)
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <__libc_init_array+0x44>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000618 	.word	0x08000618
 80005f4:	08000618 	.word	0x08000618
 80005f8:	08000618 	.word	0x08000618
 80005fc:	0800061c 	.word	0x0800061c

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
