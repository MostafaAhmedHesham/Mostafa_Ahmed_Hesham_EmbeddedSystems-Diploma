
STM32F103xx_SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800122c  0800122c  0001122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800124c  0800124c  00011254  2**0
                  CONTENTS
  4 .ARM          00000000  0800124c  0800124c  00011254  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800124c  08001254  00011254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800124c  0800124c  0001124c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001250  08001250  00011250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000000  08001254  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08001254  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000206d  00000000  00000000  0001127d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000903  00000000  00000000  000132ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d88  00000000  00000000  00013bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00014978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  00014ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bc4  00000000  00000000  00014d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000032f9  00000000  00000000  00017924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a5fb  00000000  00000000  0001ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00025218  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000700  00000000  00000000  00025268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001214 	.word	0x08001214

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001214 	.word	0x08001214

08000170 <EXTI0_IRQHandler>:



/* EXTI Line0 interrupt*/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function

	Global_PTR_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

/* EXTI Line1 interrupt*/
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:


/* EXTI Line2 interrupt*/
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:


/* EXTI Line3 interrupt*/
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:


/* EXTI Line4 interrupt*/
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:


/* EXTI Line[9:5] interrupts*/
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) { EXTI->PR |= (1<<5);	Global_PTR_IRQ_CallBack[5](); }
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <EXTI9_5_IRQHandler+0x24>
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a24      	ldr	r2, [pc, #144]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	else if (EXTI->PR & (1 << 6)) { EXTI->PR |= (1<<6);	Global_PTR_IRQ_CallBack[6](); }
	else if (EXTI->PR & (1 << 7)) { EXTI->PR |= (1<<7);	Global_PTR_IRQ_CallBack[7](); }
	else if (EXTI->PR & (1 << 8)) { EXTI->PR |= (1<<8);	Global_PTR_IRQ_CallBack[8](); }
	else if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1<<9);	Global_PTR_IRQ_CallBack[9](); }
}
 8000246:	e03e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 6)) { EXTI->PR |= (1<<6);	Global_PTR_IRQ_CallBack[6](); }
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000250:	2b00      	cmp	r3, #0
 8000252:	d009      	beq.n	8000268 <EXTI9_5_IRQHandler+0x44>
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800025a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025e:	6153      	str	r3, [r2, #20]
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4798      	blx	r3
}
 8000266:	e02e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 7)) { EXTI->PR |= (1<<7);	Global_PTR_IRQ_CallBack[7](); }
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <EXTI9_5_IRQHandler+0x64>
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6153      	str	r3, [r2, #20]
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4798      	blx	r3
}
 8000286:	e01e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 8)) { EXTI->PR |= (1<<8);	Global_PTR_IRQ_CallBack[8](); }
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000290:	2b00      	cmp	r3, #0
 8000292:	d009      	beq.n	80002a8 <EXTI9_5_IRQHandler+0x84>
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4798      	blx	r3
}
 80002a6:	e00e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1<<9);	Global_PTR_IRQ_CallBack[9](); }
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d008      	beq.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6153      	str	r3, [r2, #20]
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c4:	4798      	blx	r3
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <EXTI15_10_IRQHandler>:


/* EXTI Line[15:10] interrupts*/
void EXTI15_10_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	//EXTI->PR |= (0b111111 << 10);
	if (EXTI->PR & (1 << 10)) { EXTI->PR |= (1<<10);	Global_PTR_IRQ_CallBack[10](); }
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <EXTI15_10_IRQHandler+0x24>
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6153      	str	r3, [r2, #20]
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	4798      	blx	r3
	else if (EXTI->PR & (1 << 11)) { EXTI->PR |= (1<<11);	Global_PTR_IRQ_CallBack[11](); }
	else if (EXTI->PR & (1 << 12)) { EXTI->PR |= (1<<12);	Global_PTR_IRQ_CallBack[12](); }
	else if (EXTI->PR & (1 << 13)) { EXTI->PR |= (1<<13);	Global_PTR_IRQ_CallBack[13](); }
	else if (EXTI->PR & (1 << 14)) { EXTI->PR |= (1<<14);	Global_PTR_IRQ_CallBack[14](); }
	else if (EXTI->PR & (1 << 15)) { EXTI->PR |= (1<<15);	Global_PTR_IRQ_CallBack[15](); }
}
 80002f6:	e04e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 11)) { EXTI->PR |= (1<<11);	Global_PTR_IRQ_CallBack[11](); }
 80002f8:	4b28      	ldr	r3, [pc, #160]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000300:	2b00      	cmp	r3, #0
 8000302:	d009      	beq.n	8000318 <EXTI15_10_IRQHandler+0x44>
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800030a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800030e:	6153      	str	r3, [r2, #20]
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000314:	4798      	blx	r3
}
 8000316:	e03e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 12)) { EXTI->PR |= (1<<12);	Global_PTR_IRQ_CallBack[12](); }
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000320:	2b00      	cmp	r3, #0
 8000322:	d009      	beq.n	8000338 <EXTI15_10_IRQHandler+0x64>
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800032a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032e:	6153      	str	r3, [r2, #20]
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4798      	blx	r3
}
 8000336:	e02e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 13)) { EXTI->PR |= (1<<13);	Global_PTR_IRQ_CallBack[13](); }
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d009      	beq.n	8000358 <EXTI15_10_IRQHandler+0x84>
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6153      	str	r3, [r2, #20]
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	4798      	blx	r3
}
 8000356:	e01e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 14)) { EXTI->PR |= (1<<14);	Global_PTR_IRQ_CallBack[14](); }
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <EXTI15_10_IRQHandler+0xa4>
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6153      	str	r3, [r2, #20]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000374:	4798      	blx	r3
}
 8000376:	e00e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 15)) { EXTI->PR |= (1<<15);	Global_PTR_IRQ_CallBack[15](); }
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI15_10_IRQHandler+0xc2>
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800038a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038e:	6153      	str	r3, [r2, #20]
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000394:	4798      	blx	r3
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010400 	.word	0x40010400
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <Get_CRLH_Position>:
 *  Created on: Oct 19, 2023
 *      Author: AEMYS
 */
#include "STM32F103C6T6_GPIO_Driver.h"
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003b4:	f000 80a5 	beq.w	8000502 <Get_CRLH_Position+0x15e>
 80003b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003bc:	f300 80a3 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003c4:	f000 809b 	beq.w	80004fe <Get_CRLH_Position+0x15a>
 80003c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003cc:	f300 809b 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d4:	f000 8091 	beq.w	80004fa <Get_CRLH_Position+0x156>
 80003d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003dc:	f300 8093 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003e4:	f000 8087 	beq.w	80004f6 <Get_CRLH_Position+0x152>
 80003e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003ec:	f300 808b 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f4:	d07d      	beq.n	80004f2 <Get_CRLH_Position+0x14e>
 80003f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003fa:	f300 8084 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000402:	d074      	beq.n	80004ee <Get_CRLH_Position+0x14a>
 8000404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000408:	dc7d      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 800040a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800040e:	d06c      	beq.n	80004ea <Get_CRLH_Position+0x146>
 8000410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000414:	dc77      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 8000416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800041a:	d064      	beq.n	80004e6 <Get_CRLH_Position+0x142>
 800041c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000420:	dc71      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 8000422:	2b80      	cmp	r3, #128	; 0x80
 8000424:	d05d      	beq.n	80004e2 <Get_CRLH_Position+0x13e>
 8000426:	2b80      	cmp	r3, #128	; 0x80
 8000428:	dc6d      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 800042a:	2b20      	cmp	r3, #32
 800042c:	dc48      	bgt.n	80004c0 <Get_CRLH_Position+0x11c>
 800042e:	2b00      	cmp	r3, #0
 8000430:	dd69      	ble.n	8000506 <Get_CRLH_Position+0x162>
 8000432:	3b01      	subs	r3, #1
 8000434:	2b1f      	cmp	r3, #31
 8000436:	d866      	bhi.n	8000506 <Get_CRLH_Position+0x162>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <Get_CRLH_Position+0x9c>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	080004c7 	.word	0x080004c7
 8000444:	080004cb 	.word	0x080004cb
 8000448:	08000507 	.word	0x08000507
 800044c:	080004cf 	.word	0x080004cf
 8000450:	08000507 	.word	0x08000507
 8000454:	08000507 	.word	0x08000507
 8000458:	08000507 	.word	0x08000507
 800045c:	080004d3 	.word	0x080004d3
 8000460:	08000507 	.word	0x08000507
 8000464:	08000507 	.word	0x08000507
 8000468:	08000507 	.word	0x08000507
 800046c:	08000507 	.word	0x08000507
 8000470:	08000507 	.word	0x08000507
 8000474:	08000507 	.word	0x08000507
 8000478:	08000507 	.word	0x08000507
 800047c:	080004d7 	.word	0x080004d7
 8000480:	08000507 	.word	0x08000507
 8000484:	08000507 	.word	0x08000507
 8000488:	08000507 	.word	0x08000507
 800048c:	08000507 	.word	0x08000507
 8000490:	08000507 	.word	0x08000507
 8000494:	08000507 	.word	0x08000507
 8000498:	08000507 	.word	0x08000507
 800049c:	08000507 	.word	0x08000507
 80004a0:	08000507 	.word	0x08000507
 80004a4:	08000507 	.word	0x08000507
 80004a8:	08000507 	.word	0x08000507
 80004ac:	08000507 	.word	0x08000507
 80004b0:	08000507 	.word	0x08000507
 80004b4:	08000507 	.word	0x08000507
 80004b8:	08000507 	.word	0x08000507
 80004bc:	080004db 	.word	0x080004db
 80004c0:	2b40      	cmp	r3, #64	; 0x40
 80004c2:	d00c      	beq.n	80004de <Get_CRLH_Position+0x13a>
 80004c4:	e01f      	b.n	8000506 <Get_CRLH_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e01e      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80004ca:	2304      	movs	r3, #4
 80004cc:	e01c      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80004ce:	2308      	movs	r3, #8
 80004d0:	e01a      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80004d2:	230c      	movs	r3, #12
 80004d4:	e018      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80004d6:	2310      	movs	r3, #16
 80004d8:	e016      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80004da:	2314      	movs	r3, #20
 80004dc:	e014      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80004de:	2318      	movs	r3, #24
 80004e0:	e012      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80004e2:	231c      	movs	r3, #28
 80004e4:	e010      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	e00e      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	e00c      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80004ee:	2308      	movs	r3, #8
 80004f0:	e00a      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80004f2:	230c      	movs	r3, #12
 80004f4:	e008      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80004f6:	2310      	movs	r3, #16
 80004f8:	e006      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004fa:	2314      	movs	r3, #20
 80004fc:	e004      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004fe:	2318      	movs	r3, #24
 8000500:	e002      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000502:	231c      	movs	r3, #28
 8000504:	e000      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note-			-stm32f103c8t6 has ports A,B,C,D,E but only there is a pins for
 * 					ports A,B and a few pins from C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Pins from 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Pins from 8 >>> 15
	volatile uint32_t* config_register = NULL;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

	//A pointer to carry register to  be configured
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &(GPIOx->CRL):&(GPIOx->CRH);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	2bff      	cmp	r3, #255	; 0xff
 800052c:	d801      	bhi.n	8000532 <MCAL_GPIO_Init+0x1e>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	e001      	b.n	8000536 <MCAL_GPIO_Init+0x22>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] and MODEy[1:0]
	*config_register &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff31 	bl	80003a4 <Get_CRLH_Position>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	230f      	movs	r3, #15
 8000548:	4093      	lsls	r3, r2
 800054a:	43da      	mvns	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	401a      	ands	r2, r3
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	601a      	str	r2, [r3, #0]
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD))
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	789b      	ldrb	r3, [r3, #2]
 800055a:	2b06      	cmp	r3, #6
 800055c:	d00b      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	789b      	ldrb	r3, [r3, #2]
 8000562:	2b07      	cmp	r3, #7
 8000564:	d007      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d003      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d10e      	bne.n	8000594 <MCAL_GPIO_Init+0x80>
		{
			//Set CNFy[1:0] and MODEy[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F );
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	3b04      	subs	r3, #4
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	b25b      	sxtb	r3, r3
 8000586:	4313      	orrs	r3, r2
 8000588:	b25b      	sxtb	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 030f 	and.w	r3, r3, #15
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e02c      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
	//If Pin is input MODE = 00 Input Mode (Reset state)
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <MCAL_GPIO_Init+0x90>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d107      	bne.n	80005b4 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0F );
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 030f 	and.w	r3, r3, #15
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e01c      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d102      	bne.n	80005c2 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x00) & 0x0F ); //Consider it as input floating
 80005bc:	2304      	movs	r3, #4
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e015      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x00) & 0x0F );
 80005c2:	2308      	movs	r3, #8
 80005c4:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d107      	bne.n	80005de <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	8812      	ldrh	r2, [r2, #0]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	e007      	b.n	80005ee <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	8812      	ldrh	r2, [r2, #0]
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	401a      	ands	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60da      	str	r2, [r3, #12]
			}
		}

	}
	(*config_register) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80005ee:	7bfc      	ldrb	r4, [r7, #15]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fed5 	bl	80003a4 <Get_CRLH_Position>
 80005fa:	4603      	mov	r3, r0
 80005fc:	fa04 f203 	lsl.w	r2, r4, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	601a      	str	r2, [r3, #0]

}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bd90      	pop	{r4, r7, pc}

08000612 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Value to be written on Pin
 * @retval 		-none
 * Note-			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	460b      	mov	r3, r1
 800061c:	807b      	strh	r3, [r7, #2]
 800061e:	4613      	mov	r3, r2
 8000620:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000622:	787b      	ldrb	r3, [r7, #1]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <MCAL_GPIO_WritePin+0x24>
	{
		/*using Port output data register (GPIOx_ODR)*/
		//GPIOx->ODR |= PinNumber;

		/*Using Port bit set/reset register (GPIOx_BSRR)*/
		GPIOx->BSRR |= (uint32_t)PinNumber;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691a      	ldr	r2, [r3, #16]
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	611a      	str	r2, [r3, #16]

		/*Using Port bit reset register (GPIOx_BRR)*/
		GPIOx->BRR |= (uint32_t)PinNumber;
	}

}
 8000634:	e008      	b.n	8000648 <MCAL_GPIO_WritePin+0x36>
	else if(Value == GPIO_PIN_RESET)
 8000636:	787b      	ldrb	r3, [r7, #1]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <MCAL_GPIO_WritePin+0x36>
		GPIOx->BRR |= (uint32_t)PinNumber;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	431a      	orrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	615a      	str	r2, [r3, #20]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
	...

08000654 <MCAL_RCC_GetSYSCLKFreq>:
 * @retval 		-none
 * Note			-As RCC is corresponding to GPIO pins you must to Enable RCC for GPIO port and set the AFIO for pin to be used as RCC
 */

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	switch( ((RCC->CFGR & (0b11 << 2)) >> 2) )
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	2b03      	cmp	r3, #3
 8000664:	d812      	bhi.n	800068c <MCAL_RCC_GetSYSCLKFreq+0x38>
 8000666:	a201      	add	r2, pc, #4	; (adr r2, 800066c <MCAL_RCC_GetSYSCLKFreq+0x18>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	0800067d 	.word	0x0800067d
 8000670:	08000681 	.word	0x08000681
 8000674:	08000685 	.word	0x08000685
 8000678:	08000689 	.word	0x08000689
	{
		case 0b00:
			return HSI_CLK;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MCAL_RCC_GetSYSCLKFreq+0x48>)
 800067e:	e006      	b.n	800068e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b01:
			return HSE_CLK;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MCAL_RCC_GetSYSCLKFreq+0x4c>)
 8000682:	e004      	b.n	800068e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b10:
			return 16000000;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MCAL_RCC_GetSYSCLKFreq+0x4c>)
 8000686:	e002      	b.n	800068e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b11:
			return 0;
 8000688:	2300      	movs	r3, #0
 800068a:	e000      	b.n	800068e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
	}
	return 0;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	007a1200 	.word	0x007a1200
 80006a0:	00f42400 	.word	0x00f42400

080006a4 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	uint32_t SYS_CLK = MCAL_RCC_GetSYSCLKFreq();
 80006aa:	f7ff ffd3 	bl	8000654 <MCAL_RCC_GetSYSCLKFreq>
 80006ae:	6078      	str	r0, [r7, #4]

	return (SYS_CLK >> AHBPrescTable[ ( RCC->CFGR & (0b1111 << 4) >> 4 ) ]);
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MCAL_RCC_GetHCLKFreq+0x28>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <MCAL_RCC_GetHCLKFreq+0x2c>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	0800122c 	.word	0x0800122c

080006d4 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint32_t HCLK = MCAL_RCC_GetHCLKFreq();
 80006da:	f7ff ffe3 	bl	80006a4 <MCAL_RCC_GetHCLKFreq>
 80006de:	6078      	str	r0, [r7, #4]
	return (HCLK >> APBPrescTable[ ( RCC->CFGR & (0b111 << 8) >> 8 ) ]);
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MCAL_RCC_GetPCLK1Freq+0x28>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f003 0307 	and.w	r3, r3, #7
 80006e8:	4a05      	ldr	r2, [pc, #20]	; (8000700 <MCAL_RCC_GetPCLK1Freq+0x2c>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	0800123c 	.word	0x0800123c

08000704 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	uint32_t HCLK = MCAL_RCC_GetHCLKFreq();
 800070a:	f7ff ffcb 	bl	80006a4 <MCAL_RCC_GetHCLKFreq>
 800070e:	6078      	str	r0, [r7, #4]
	return (HCLK >> APBPrescTable[ ( RCC->CFGR & (0b111 << 11) >> 11 ) ]);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MCAL_RCC_GetPCLK2Freq+0x28>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f003 0307 	and.w	r3, r3, #7
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <MCAL_RCC_GetPCLK2Freq+0x2c>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	0800123c 	.word	0x0800123c

08000734 <MCAL_SPI_Init>:
 * @retval 		-none
 * Note			-Support only Full Duplex Master/Slave only & NSS HW/SW
 * 				 in case of master you have to configure pin and drive it.
 */
void MCAL_SPI_Init(SPI_TypeDef *SPIx,SPI_Config *Config_SPIx)
{
 8000734:	b4b0      	push	{r4, r5, r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	//Safety Dummy Registers to Prevent Errors due to init ordering
	uint16_t tmp_CR1 = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	81fb      	strh	r3, [r7, #14]
	uint16_t tmp_CR2 = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a4a      	ldr	r2, [pc, #296]	; (8000874 <MCAL_SPI_Init+0x140>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d110      	bne.n	8000770 <MCAL_SPI_Init+0x3c>
	{
		RCC_SPI1_CLK_Enable();
 800074e:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <MCAL_SPI_Init+0x144>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MCAL_SPI_Init+0x144>)
 8000754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000758:	6193      	str	r3, [r2, #24]
		Global_SPI_Config[0] = *Config_SPIx;
 800075a:	4a48      	ldr	r2, [pc, #288]	; (800087c <MCAL_SPI_Init+0x148>)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	4614      	mov	r4, r2
 8000760:	461d      	mov	r5, r3
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076a:	e884 0003 	stmia.w	r4, {r0, r1}
 800076e:	e014      	b.n	800079a <MCAL_SPI_Init+0x66>
	}
	else if(SPIx == SPI2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a40      	ldr	r2, [pc, #256]	; (8000874 <MCAL_SPI_Init+0x140>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d110      	bne.n	800079a <MCAL_SPI_Init+0x66>
	{
		RCC_SPI2_CLK_Enable();
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MCAL_SPI_Init+0x144>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	4a3e      	ldr	r2, [pc, #248]	; (8000878 <MCAL_SPI_Init+0x144>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	61d3      	str	r3, [r2, #28]
		Global_SPI_Config[1] = *Config_SPIx;
 8000784:	4b3d      	ldr	r3, [pc, #244]	; (800087c <MCAL_SPI_Init+0x148>)
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	f103 0418 	add.w	r4, r3, #24
 800078c:	4615      	mov	r5, r2
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000796:	e884 0003 	stmia.w	r4, {r0, r1}
	}

	//Enable SPI
	tmp_CR1 |= (1 << 6);
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmp_CR1 |= Config_SPIx->Device_MODE;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	81fb      	strh	r3, [r7, #14]

	//Communication Mode
	tmp_CR1 |= Config_SPIx->Communication_MODE;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	885a      	ldrh	r2, [r3, #2]
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	81fb      	strh	r3, [r7, #14]

	//Frame Format --> LSB First/MSP First
	tmp_CR1 |= Config_SPIx->Bit_Orientation;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	889a      	ldrh	r2, [r3, #4]
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	4313      	orrs	r3, r2
 80007be:	81fb      	strh	r3, [r7, #14]

	//Data Size
	tmp_CR1 |= Config_SPIx->Data_Size;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	88da      	ldrh	r2, [r3, #6]
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	81fb      	strh	r3, [r7, #14]

	//Clock Polarity
	tmp_CR1 |= Config_SPIx->Clk_Polarity;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	891a      	ldrh	r2, [r3, #8]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	81fb      	strh	r3, [r7, #14]

	//Clock Phase
	tmp_CR1 |= Config_SPIx->Clk_Phase;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	895a      	ldrh	r2, [r3, #10]
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	4313      	orrs	r3, r2
 80007dc:	81fb      	strh	r3, [r7, #14]

	//NSS
	if (Config_SPIx->NSS == SPI_NSS_HW_Output_EN)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d104      	bne.n	80007f0 <MCAL_SPI_Init+0xbc>
		tmp_CR2 |= SPI_NSS_HW_Output_EN;
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	81bb      	strh	r3, [r7, #12]
 80007ee:	e012      	b.n	8000816 <MCAL_SPI_Init+0xe2>
	else if (Config_SPIx->NSS == SPI_NSS_HW_Output_Disable)
		tmp_CR2 &= SPI_NSS_HW_Output_Disable;
	else if (Config_SPIx->NSS == SPI_NSS_SW_SET)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007f8:	d104      	bne.n	8000804 <MCAL_SPI_Init+0xd0>
		tmp_CR1 |= SPI_NSS_SW_SET;
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000800:	81fb      	strh	r3, [r7, #14]
 8000802:	e008      	b.n	8000816 <MCAL_SPI_Init+0xe2>
	else if (Config_SPIx->NSS == SPI_NSS_SW_RESET)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	899b      	ldrh	r3, [r3, #12]
 8000808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800080c:	d103      	bne.n	8000816 <MCAL_SPI_Init+0xe2>
		tmp_CR1 |= SPI_NSS_SW_RESET;
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000814:	81fb      	strh	r3, [r7, #14]

	//BaudRate Prescaler
	tmp_CR1 |= Config_SPIx->BaudRate_Prescaler;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	89da      	ldrh	r2, [r3, #14]
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4313      	orrs	r3, r2
 800081e:	81fb      	strh	r3, [r7, #14]

	if (Config_SPIx->IRQ_Enable != SPI_IRQ_NONE)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	8a1b      	ldrh	r3, [r3, #16]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d019      	beq.n	800085c <MCAL_SPI_Init+0x128>
	{
		tmp_CR2 |= Config_SPIx->IRQ_Enable;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	8a1a      	ldrh	r2, [r3, #16]
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	4313      	orrs	r3, r2
 8000830:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MCAL_SPI_Init+0x140>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <MCAL_SPI_Init+0x114>
			NVIC_SPI1_EN();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MCAL_SPI_Init+0x14c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <MCAL_SPI_Init+0x14c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	e009      	b.n	800085c <MCAL_SPI_Init+0x128>
		else if(SPIx == SPI2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <MCAL_SPI_Init+0x140>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d105      	bne.n	800085c <MCAL_SPI_Init+0x128>
			NVIC_SPI1_EN();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MCAL_SPI_Init+0x14c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <MCAL_SPI_Init+0x14c>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6013      	str	r3, [r2, #0]
	}

	SPI1->CR1 = tmp_CR1;
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <MCAL_SPI_Init+0x140>)
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	6013      	str	r3, [r2, #0]
	SPI1->CR2 = tmp_CR2;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <MCAL_SPI_Init+0x140>)
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	6053      	str	r3, [r2, #4]

}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bcb0      	pop	{r4, r5, r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40013000 	.word	0x40013000
 8000878:	40021000 	.word	0x40021000
 800087c:	2000005c 	.word	0x2000005c
 8000880:	e000e104 	.word	0xe000e104

08000884 <MCAL_SPI_GPIO_Set_Pins>:
 * @param [in] 	-SPIx: where x can be (1,2,3 depending on the device used)
 * @retval 		-none
 * Note			-None
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef *SPIx)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_pin;
	RCC_AFIO_CLK_EN();
 800088c:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a81      	ldr	r2, [pc, #516]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6193      	str	r3, [r2, #24]
	if (SPIx == SPI1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a80      	ldr	r2, [pc, #512]	; (8000a9c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d177      	bne.n	8000990 <MCAL_SPI_GPIO_Set_Pins+0x10c>
	{
		RCC_GPIOA_CLK_EN();
 80008a0:	4b7d      	ldr	r3, [pc, #500]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a7c      	ldr	r2, [pc, #496]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
			SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
			SPI_pin.GPIO_PinNumber = GPIO_PIN_4;
			MCAL_GPIO_Init(GPIOA, &SPI_pin);
		}
		else if(Global_SPI_Config[0].NSS == SPI_NSS_HW_Output_EN)
 80008ac:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d10c      	bne.n	80008ce <MCAL_SPI_GPIO_Set_Pins+0x4a>
		{
			SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008b4:	2306      	movs	r3, #6
 80008b6:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_4;
 80008bc:	2310      	movs	r3, #16
 80008be:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &SPI_pin);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4877      	ldr	r0, [pc, #476]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80008c8:	f7ff fe24 	bl	8000514 <MCAL_GPIO_Init>
 80008cc:	e003      	b.n	80008d6 <MCAL_SPI_GPIO_Set_Pins+0x52>
		}
		else if(Global_SPI_Config[0].NSS == SPI_NSS_SW_SET || Global_SPI_Config[0].NSS == SPI_NSS_SW_RESET)
 80008ce:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
			//The slave select information is driven internally by the value of the SSI bit in the
			//SPI_CR1 register. The external NSS pin remains free for other application uses.
		}


		if(Global_SPI_Config[0].Device_MODE == SPI_Device_MODE_MASTER)
 80008d6:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d129      	bne.n	8000932 <MCAL_SPI_GPIO_Set_Pins+0xae>
		{
			//PA5 - SCK
			SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008de:	2306      	movs	r3, #6
 80008e0:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_5;
 80008e6:	2320      	movs	r3, #32
 80008e8:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &SPI_pin);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	486c      	ldr	r0, [pc, #432]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80008f2:	f7ff fe0f 	bl	8000514 <MCAL_GPIO_Init>


			if(Global_SPI_Config[0].Communication_MODE == SPI_Directional_2Lines)
 80008f6:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80008f8:	885b      	ldrh	r3, [r3, #2]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f040 80c7 	bne.w	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
			{
				//PA7 - MOSI --> Full Duplex Master
				SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000900:	2306      	movs	r3, #6
 8000902:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_7;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &SPI_pin);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4864      	ldr	r0, [pc, #400]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000914:	f7ff fdfe 	bl	8000514 <MCAL_GPIO_Init>

				//PA6 - MISO --> Full Duplex Master
				SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000918:	2301      	movs	r3, #1
 800091a:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_6;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &SPI_pin);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 800092c:	f7ff fdf2 	bl	8000514 <MCAL_GPIO_Init>
				SPI_pin.GPIO_PinNumber = GPIO_PIN_14;
				MCAL_GPIO_Init(GPIOB, &SPI_pin);
			}
		}
	}
}
 8000930:	e0ad      	b.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
		else if(Global_SPI_Config[0].Device_MODE == SPI_Device_MODE_SLAVE)
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 80a9 	bne.w	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
			SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800093c:	2301      	movs	r3, #1
 800093e:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_5;
 8000944:	2320      	movs	r3, #32
 8000946:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &SPI_pin);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4855      	ldr	r0, [pc, #340]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000950:	f7ff fde0 	bl	8000514 <MCAL_GPIO_Init>
			if(Global_SPI_Config[0].Communication_MODE == SPI_Directional_2Lines)
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000956:	885b      	ldrh	r3, [r3, #2]
 8000958:	2b00      	cmp	r3, #0
 800095a:	f040 8098 	bne.w	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
				SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800095e:	2301      	movs	r3, #1
 8000960:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_7;
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &SPI_pin);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	484c      	ldr	r0, [pc, #304]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000972:	f7ff fdcf 	bl	8000514 <MCAL_GPIO_Init>
				SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000976:	2306      	movs	r3, #6
 8000978:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_6;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &SPI_pin);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4846      	ldr	r0, [pc, #280]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 800098a:	f7ff fdc3 	bl	8000514 <MCAL_GPIO_Init>
}
 800098e:	e07e      	b.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
	else if (SPIx == SPI2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a42      	ldr	r2, [pc, #264]	; (8000a9c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d17a      	bne.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
		RCC_GPIOB_CLK_EN();
 8000998:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6193      	str	r3, [r2, #24]
		else if(Global_SPI_Config[1].NSS == SPI_NSS_HW_Output_EN)
 80009a4:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80009a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d10d      	bne.n	80009c8 <MCAL_SPI_GPIO_Set_Pins+0x144>
			SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009ac:	2306      	movs	r3, #6
 80009ae:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_12;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &SPI_pin);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80009c2:	f7ff fda7 	bl	8000514 <MCAL_GPIO_Init>
 80009c6:	e003      	b.n	80009d0 <MCAL_SPI_GPIO_Set_Pins+0x14c>
		else if(Global_SPI_Config[1].NSS == SPI_NSS_SW_SET || Global_SPI_Config[1].NSS == SPI_NSS_SW_RESET)
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80009ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
		if(Global_SPI_Config[1].Device_MODE == SPI_Device_MODE_MASTER)
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80009d2:	8b1b      	ldrh	r3, [r3, #24]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d12b      	bne.n	8000a30 <MCAL_SPI_GPIO_Set_Pins+0x1ac>
			SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009d8:	2306      	movs	r3, #6
 80009da:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_13;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &SPI_pin);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 80009ee:	f7ff fd91 	bl	8000514 <MCAL_GPIO_Init>
			if(Global_SPI_Config[1].Communication_MODE == SPI_Directional_2Lines)
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80009f4:	8b5b      	ldrh	r3, [r3, #26]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d149      	bne.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
				SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009fa:	2306      	movs	r3, #6
 80009fc:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_15;
 8000a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a06:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &SPI_pin);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4826      	ldr	r0, [pc, #152]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a10:	f7ff fd80 	bl	8000514 <MCAL_GPIO_Init>
				SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_14;
 8000a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a20:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &SPI_pin);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	481f      	ldr	r0, [pc, #124]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a2a:	f7ff fd73 	bl	8000514 <MCAL_GPIO_Init>
}
 8000a2e:	e02e      	b.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
		else if(Global_SPI_Config[1].Device_MODE == SPI_Device_MODE_SLAVE)
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a32:	8b1b      	ldrh	r3, [r3, #24]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d12a      	bne.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
			SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73bb      	strb	r3, [r7, #14]
			SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
			SPI_pin.GPIO_PinNumber = GPIO_PIN_13;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &SPI_pin);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a4e:	f7ff fd61 	bl	8000514 <MCAL_GPIO_Init>
			if(Global_SPI_Config[1].Communication_MODE == SPI_Directional_2Lines)
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a54:	8b5b      	ldrh	r3, [r3, #26]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d119      	bne.n	8000a8e <MCAL_SPI_GPIO_Set_Pins+0x20a>
				SPI_pin.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_15;
 8000a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a66:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &SPI_pin);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a70:	f7ff fd50 	bl	8000514 <MCAL_GPIO_Init>
				SPI_pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a74:	2306      	movs	r3, #6
 8000a76:	73bb      	strb	r3, [r7, #14]
				SPI_pin.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
				SPI_pin.GPIO_PinNumber = GPIO_PIN_14;
 8000a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a80:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &SPI_pin);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a8a:	f7ff fd43 	bl	8000514 <MCAL_GPIO_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	2000005c 	.word	0x2000005c
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <MCAL_SPI_TX_RX>:
 * @param [in] 	-PollingEn: Enum variable that provide polling capability to the Receiving function
 * @retval 		-none
 * Note			-none
 */
void MCAL_SPI_TX_RX(SPI_TypeDef *SPIx, uint16_t *pBuffer, enum SPI_Polling_mechanism Polling)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	71fb      	strb	r3, [r7, #7]
	if (Polling == SPI_Polling_Enable)
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d106      	bne.n	8000ace <MCAL_SPI_TX_RX+0x22>
		while( ((SPIx->SR & (1 << 1)) >> 1) == 0 );
 8000ac0:	bf00      	nop
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <MCAL_SPI_TX_RX+0x16>

	SPIx->DR = *pBuffer;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	60da      	str	r2, [r3, #12]

	if (Polling == SPI_Polling_Enable)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d106      	bne.n	8000aec <MCAL_SPI_TX_RX+0x40>
		while( ((SPIx->SR & (1 << 0)) >> 0) == 0 );
 8000ade:	bf00      	nop
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <MCAL_SPI_TX_RX+0x34>

	*pBuffer = SPIx->DR;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	801a      	strh	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SPI1_IRQHandler>:
* 									ISR Functions
* ===========================================================================================
*/

void SPI1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	SPI_Interrupt interrupt_src;
	interrupt_src.TXE = ((SPI1->SR & (1 << 1)) >> 1);
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <SPI1_IRQHandler+0x50>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	793b      	ldrb	r3, [r7, #4]
 8000b14:	f362 0300 	bfi	r3, r2, #0, #1
 8000b18:	713b      	strb	r3, [r7, #4]
	interrupt_src.RXNE = ((SPI1->SR & (1 << 0)) >> 0);
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <SPI1_IRQHandler+0x50>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	f362 0341 	bfi	r3, r2, #1, #1
 8000b2a:	713b      	strb	r3, [r7, #4]
	interrupt_src.ERRI = ((SPI1->SR & (1 << 4)) >> 4);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SPI1_IRQHandler+0x50>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	793b      	ldrb	r3, [r7, #4]
 8000b3a:	f362 0382 	bfi	r3, r2, #2, #1
 8000b3e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[0].PTR_IRQ_CallBack(interrupt_src);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SPI1_IRQHandler+0x54>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	7938      	ldrb	r0, [r7, #4]
 8000b46:	4798      	blx	r3
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40013000 	.word	0x40013000
 8000b54:	2000005c 	.word	0x2000005c

08000b58 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	SPI_Interrupt interrupt_src;
	interrupt_src.TXE = ((SPI2->SR & (1 << 1)) >> 1);
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SPI2_IRQHandler+0x50>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	793b      	ldrb	r3, [r7, #4]
 8000b6c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b70:	713b      	strb	r3, [r7, #4]
	interrupt_src.RXNE = ((SPI2->SR & (1 << 0)) >> 0);
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SPI2_IRQHandler+0x50>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b82:	713b      	strb	r3, [r7, #4]
	interrupt_src.ERRI = ((SPI2->SR & (1 << 4)) >> 4);
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SPI2_IRQHandler+0x50>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	793b      	ldrb	r3, [r7, #4]
 8000b92:	f362 0382 	bfi	r3, r2, #2, #1
 8000b96:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[1].PTR_IRQ_CallBack(interrupt_src);
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SPI2_IRQHandler+0x54>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	7938      	ldrb	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	2000005c 	.word	0x2000005c

08000bb0 <MCAL_USART_Init>:
 * @param [in] 	-Config_USARTx: All the UART configuration
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_Init(USART_TypeDef *USARTx, USART_Config *Config_USARTx)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	if(USARTx == USART1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a66      	ldr	r2, [pc, #408]	; (8000d58 <MCAL_USART_Init+0x1a8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d108      	bne.n	8000bd4 <MCAL_USART_Init+0x24>
		Global_USART_Config[0] = *Config_USARTx;
 8000bc2:	4a66      	ldr	r2, [pc, #408]	; (8000d5c <MCAL_USART_Init+0x1ac>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4614      	mov	r4, r2
 8000bc8:	461d      	mov	r5, r3
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	6023      	str	r3, [r4, #0]
 8000bd2:	e01a      	b.n	8000c0a <MCAL_USART_Init+0x5a>
	else if (USARTx == USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a62      	ldr	r2, [pc, #392]	; (8000d60 <MCAL_USART_Init+0x1b0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d109      	bne.n	8000bf0 <MCAL_USART_Init+0x40>
		Global_USART_Config[1] = *Config_USARTx;
 8000bdc:	4b5f      	ldr	r3, [pc, #380]	; (8000d5c <MCAL_USART_Init+0x1ac>)
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	f103 0414 	add.w	r4, r3, #20
 8000be4:	4615      	mov	r5, r2
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	6023      	str	r3, [r4, #0]
 8000bee:	e00c      	b.n	8000c0a <MCAL_USART_Init+0x5a>
	else if (USARTx == USART3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a5c      	ldr	r2, [pc, #368]	; (8000d64 <MCAL_USART_Init+0x1b4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d108      	bne.n	8000c0a <MCAL_USART_Init+0x5a>
		Global_USART_Config[2] = *Config_USARTx;
 8000bf8:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <MCAL_USART_Init+0x1ac>)
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000c00:	4615      	mov	r5, r2
 8000c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	6023      	str	r3, [r4, #0]

	//Enable Clock for Given USART
	if(USARTx == USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a52      	ldr	r2, [pc, #328]	; (8000d58 <MCAL_USART_Init+0x1a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d106      	bne.n	8000c20 <MCAL_USART_Init+0x70>
		RCC_USART1_CLK_EN();
 8000c12:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a54      	ldr	r2, [pc, #336]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	e014      	b.n	8000c4a <MCAL_USART_Init+0x9a>
	else if (USARTx == USART2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4f      	ldr	r2, [pc, #316]	; (8000d60 <MCAL_USART_Init+0x1b0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d106      	bne.n	8000c36 <MCAL_USART_Init+0x86>
		RCC_USART2_CLK_EN();
 8000c28:	4b4f      	ldr	r3, [pc, #316]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4a4e      	ldr	r2, [pc, #312]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c32:	61d3      	str	r3, [r2, #28]
 8000c34:	e009      	b.n	8000c4a <MCAL_USART_Init+0x9a>
	else if (USARTx == USART3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4a      	ldr	r2, [pc, #296]	; (8000d64 <MCAL_USART_Init+0x1b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d105      	bne.n	8000c4a <MCAL_USART_Init+0x9a>
		RCC_USART3_CLK_EN();
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a49      	ldr	r2, [pc, #292]	; (8000d68 <MCAL_USART_Init+0x1b8>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	61d3      	str	r3, [r2, #28]

	//Enable USART module Bit 13 UE:USART_CR1
	USARTx->CR1 |= (1 << 13);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60da      	str	r2, [r3, #12]

	//Enable Tx/Rx according to user config.
	USARTx->CR1 |= Config_USARTx->USART_MODE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60da      	str	r2, [r3, #12]

	//Payload Width
	USARTx->CR1 |= Config_USARTx->USART_WordLength;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	7a12      	ldrb	r2, [r2, #8]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60da      	str	r2, [r3, #12]

	//Parity Config
	USARTx->CR1 |= Config_USARTx->USART_Parity;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	7a52      	ldrb	r2, [r2, #9]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60da      	str	r2, [r3, #12]

	//Stop bits config
	USARTx->CR2 |= Config_USARTx->USART_StopBits;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	7a92      	ldrb	r2, [r2, #10]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]

	//Hardware Flow control Config
	USARTx->CR3 |= Config_USARTx->USART_FlowCtrl;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	7ad2      	ldrb	r2, [r2, #11]
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]


	//Baud Rate Config
	uint32_t pclk;
	if(USARTx == USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <MCAL_USART_Init+0x1a8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d103      	bne.n	8000cac <MCAL_USART_Init+0xfc>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000ca4:	f7ff fd2e 	bl	8000704 <MCAL_RCC_GetPCLK2Freq>
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	e002      	b.n	8000cb2 <MCAL_USART_Init+0x102>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000cac:	f7ff fd12 	bl	80006d4 <MCAL_RCC_GetPCLK1Freq>
 8000cb0:	60f8      	str	r0, [r7, #12]

	USARTx->BRR = USART_BRR(pclk,Config_USARTx->USART_BaudRate);
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	009a      	lsls	r2, r3, #2
 8000cbc:	441a      	add	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd4:	2164      	movs	r1, #100	; 0x64
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <MCAL_USART_Init+0x1bc>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	095a      	lsrs	r2, r3, #5
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

	//Enable USART Interrupts
	if(Config_USARTx->USART_IRQ_Enable != USART_IRQ_Enable_NONE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	7b1b      	ldrb	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d026      	beq.n	8000d50 <MCAL_USART_Init+0x1a0>
	{
		USARTx->CR1 |= (Config_USARTx ->USART_IRQ_Enable);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	7b12      	ldrb	r2, [r2, #12]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60da      	str	r2, [r3, #12]

		//Enable Interrupt for Given USART
		if(USARTx == USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <MCAL_USART_Init+0x1a8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d106      	bne.n	8000d26 <MCAL_USART_Init+0x176>
			NVIC_USART1_EN();
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6013      	str	r3, [r2, #0]
			NVIC_USART1_EN();
		else if (USARTx == USART3)
			NVIC_USART1_EN();
	}

}
 8000d24:	e014      	b.n	8000d50 <MCAL_USART_Init+0x1a0>
		else if (USARTx == USART2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <MCAL_USART_Init+0x1b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d106      	bne.n	8000d3c <MCAL_USART_Init+0x18c>
			NVIC_USART1_EN();
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	e009      	b.n	8000d50 <MCAL_USART_Init+0x1a0>
		else if (USARTx == USART3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <MCAL_USART_Init+0x1b4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d105      	bne.n	8000d50 <MCAL_USART_Init+0x1a0>
			NVIC_USART1_EN();
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <MCAL_USART_Init+0x1c0>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}
 8000d58:	40013800 	.word	0x40013800
 8000d5c:	2000008c 	.word	0x2000008c
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40004800 	.word	0x40004800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	51eb851f 	.word	0x51eb851f
 8000d70:	e000e104 	.word	0xe000e104

08000d74 <MCAL_USART_GPIO_Set_Pins>:
 * @param [in] 	-USARTx: where x can be (1,2,3 depending on the device used)
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_GPIO_Set_Pins(USART_TypeDef *USARTx)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t usart_pins_config;
	if (USARTx == USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d119      	bne.n	8000db8 <MCAL_USART_GPIO_Set_Pins+0x44>
	{
		//Tx = PA9
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d84:	2306      	movs	r3, #6
 8000d86:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_9;
 8000d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d90:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4827      	ldr	r0, [pc, #156]	; (8000e38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000d9a:	f7ff fbbb 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PA10
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_10;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	4821      	ldr	r0, [pc, #132]	; (8000e38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000db4:	f7ff fbae 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_12;
			MCAL_GPIO_Init(GPIOA, &usart_pins_config);
		}

	}
	if (USARTx == USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d117      	bne.n	8000df0 <MCAL_USART_GPIO_Set_Pins+0x7c>
	{
		//Tx = PA2
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_2;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000dd4:	f7ff fb9e 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PA3
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_3;
 8000de0:	2308      	movs	r3, #8
 8000de2:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000dec:	f7ff fb92 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_1;
			MCAL_GPIO_Init(GPIOA, &usart_pins_config);
		}

	}
	if (USARTx == USART3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MCAL_USART_GPIO_Set_Pins+0xcc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d119      	bne.n	8000e2c <MCAL_USART_GPIO_Set_Pins+0xb8>
	{
		//Tx = PB10
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_10;
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e04:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_pins_config);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MCAL_USART_GPIO_Set_Pins+0xd0>)
 8000e0e:	f7ff fb81 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PB11
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_11;
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_pins_config);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MCAL_USART_GPIO_Set_Pins+0xd0>)
 8000e28:	f7ff fb74 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_14;
			MCAL_GPIO_Init(GPIOB, &usart_pins_config);
		}

	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40004800 	.word	0x40004800
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <MCAL_USART_SendData>:
*/

/*MY Function*/

void MCAL_USART_SendData(USART_TypeDef *USARTx, uint16_t* pTxBuffer, enum USART_Polling_mechanism PollingEn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
	//Wait until TXE is Empty in case of polling
	if (PollingEn == USART_Polling_Enable)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <MCAL_USART_SendData+0x22>
		while(((USARTx->SR &(1 << 7))>>7) == 0 );
 8000e5c:	bf00      	nop
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <MCAL_USART_SendData+0x16>

	if (USARTx == USART1)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <MCAL_USART_SendData+0xc4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d114      	bne.n	8000e9c <MCAL_USART_SendData+0x54>
				//Parity exist so only 8 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
			}
		}

		else if(Global_USART_Config[0].USART_WordLength == USART_8_DataBits)
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000e74:	7a1b      	ldrb	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d143      	bne.n	8000f02 <MCAL_USART_SendData+0xba>
		{
			if (Global_USART_Config[0].USART_Parity == USART_Parity_NONE)
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000e7c:	7a5b      	ldrb	r3, [r3, #9]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <MCAL_USART_SendData+0x46>
			{
				//No parity so all 8 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	605a      	str	r2, [r3, #4]
				//Parity exist so only 7 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
			}
		}
	}
}
 8000e8c:	e039      	b.n	8000f02 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	605a      	str	r2, [r3, #4]
}
 8000e9a:	e032      	b.n	8000f02 <MCAL_USART_SendData+0xba>
	else if (USARTx == USART2)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <MCAL_USART_SendData+0xcc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d114      	bne.n	8000ece <MCAL_USART_SendData+0x86>
		else if(Global_USART_Config[1].USART_WordLength == USART_8_DataBits)
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000ea6:	7f1b      	ldrb	r3, [r3, #28]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d12a      	bne.n	8000f02 <MCAL_USART_SendData+0xba>
			if (Global_USART_Config[1].USART_Parity == USART_Parity_NONE)
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000eae:	7f5b      	ldrb	r3, [r3, #29]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <MCAL_USART_SendData+0x78>
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	605a      	str	r2, [r3, #4]
}
 8000ebe:	e020      	b.n	8000f02 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	605a      	str	r2, [r3, #4]
}
 8000ecc:	e019      	b.n	8000f02 <MCAL_USART_SendData+0xba>
	else if (USARTx == USART3)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <MCAL_USART_SendData+0xd0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d115      	bne.n	8000f02 <MCAL_USART_SendData+0xba>
		else if(Global_USART_Config[2].USART_WordLength == USART_8_DataBits)
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d110      	bne.n	8000f02 <MCAL_USART_SendData+0xba>
			if (Global_USART_Config[2].USART_Parity == USART_Parity_NONE)
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MCAL_USART_SendData+0xc8>)
 8000ee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <MCAL_USART_SendData+0xae>
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	605a      	str	r2, [r3, #4]
}
 8000ef4:	e005      	b.n	8000f02 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	605a      	str	r2, [r3, #4]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	2000008c 	.word	0x2000008c
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40004800 	.word	0x40004800

08000f1c <MCAL_USART_ReceiveData>:
 * @param [in] 	-PollingEn: Enum variable that provide polling capability to the Receiving function
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_ReceiveData(USART_TypeDef *USARTx, uint16_t* pRxBuffer, enum USART_Polling_mechanism PollingEn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	4613      	mov	r3, r2
 8000f28:	71fb      	strb	r3, [r7, #7]
	//Wait until RXNE is Empty in case of polling
	if (PollingEn == USART_Polling_Enable)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <MCAL_USART_ReceiveData+0x22>
		while (((USARTx->SR &(1 << 5))>>5) == 0); //Wait for data to be Received
 8000f30:	bf00      	nop
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <MCAL_USART_ReceiveData+0x16>


	if(USARTx == USART1)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MCAL_USART_ReceiveData+0xdc>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d118      	bne.n	8000f78 <MCAL_USART_ReceiveData+0x5c>
				//Parity exist so only 8 bits is considered as data
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
				//*(pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
			}
		}
		else if(Global_USART_Config[0].USART_WordLength == USART_8_DataBits)
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000f48:	7a1b      	ldrb	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14f      	bne.n	8000fee <MCAL_USART_ReceiveData+0xd2>
		{
			if (Global_USART_Config[0].USART_Parity == USART_Parity_NONE)
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000f50:	7a5b      	ldrb	r3, [r3, #9]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <MCAL_USART_ReceiveData+0x4a>
			{
				//No parity so all 8 bits is considered as data
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	801a      	strh	r2, [r3, #0]
			}
		}
	}


}
 8000f64:	e043      	b.n	8000fee <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	801a      	strh	r2, [r3, #0]
}
 8000f76:	e03a      	b.n	8000fee <MCAL_USART_ReceiveData+0xd2>
	else if (USARTx == USART2)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <MCAL_USART_ReceiveData+0xe4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d118      	bne.n	8000fb2 <MCAL_USART_ReceiveData+0x96>
		else if(Global_USART_Config[1].USART_WordLength == USART_8_DataBits)
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000f82:	7f1b      	ldrb	r3, [r3, #28]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d132      	bne.n	8000fee <MCAL_USART_ReceiveData+0xd2>
			if (Global_USART_Config[1].USART_Parity == USART_Parity_NONE)
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000f8a:	7f5b      	ldrb	r3, [r3, #29]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <MCAL_USART_ReceiveData+0x84>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	801a      	strh	r2, [r3, #0]
}
 8000f9e:	e026      	b.n	8000fee <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	801a      	strh	r2, [r3, #0]
}
 8000fb0:	e01d      	b.n	8000fee <MCAL_USART_ReceiveData+0xd2>
	else if (USARTx == USART3)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MCAL_USART_ReceiveData+0xe8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d119      	bne.n	8000fee <MCAL_USART_ReceiveData+0xd2>
		else if(Global_USART_Config[2].USART_WordLength == USART_8_DataBits)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d114      	bne.n	8000fee <MCAL_USART_ReceiveData+0xd2>
			if (Global_USART_Config[2].USART_Parity == USART_Parity_NONE)
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MCAL_USART_ReceiveData+0xe0>)
 8000fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d107      	bne.n	8000fde <MCAL_USART_ReceiveData+0xc2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	801a      	strh	r2, [r3, #0]
}
 8000fdc:	e007      	b.n	8000fee <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	801a      	strh	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	40004400 	.word	0x40004400
 8001004:	40004800 	.word	0x40004800

08001008 <USART1_IRQHandler>:
* ===========================================================================================
*/


void USART1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	Global_USART_Config[0].USART_IRQ_CallBack_Func();
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <USART1_IRQHandler+0x10>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4798      	blx	r3
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000008c 	.word	0x2000008c

0800101c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	Global_USART_Config[1].USART_IRQ_CallBack_Func();
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <USART2_IRQHandler+0x10>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	4798      	blx	r3

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000008c 	.word	0x2000008c

08001030 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	Global_USART_Config[2].USART_IRQ_CallBack_Func();
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <USART3_IRQHandler+0x10>)
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	4798      	blx	r3
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000008c 	.word	0x2000008c

08001044 <clock_init>:

#define MCU_ACT_AS_MASTER
//#define MCU_ACT_AS_SLAVE

void clock_init(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <clock_init+0x30>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a09      	ldr	r2, [pc, #36]	; (8001074 <clock_init+0x30>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <clock_init+0x30>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <clock_init+0x30>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <clock_init+0x30>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a03      	ldr	r2, [pc, #12]	; (8001074 <clock_init+0x30>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000

08001078 <main>:
void MOSTAFA_SPI_CALLBACK(SPI_Interrupt interrupt_src);

unsigned short ch;

int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
	clock_init();
 800107e:	f7ff ffe1 	bl	8001044 <clock_init>

	USART_Config uart_config;

	uart_config.USART_BaudRate = USART_BaudRate_115200;
 8001082:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001086:	623b      	str	r3, [r7, #32]
	uart_config.USART_FlowCtrl = USART_FlowCtrl_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uart_config.USART_IRQ_Enable = USART_IRQ_Enable_RXNEIE_ORE;
 800108e:	2320      	movs	r3, #32
 8001090:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uart_config.USART_IRQ_CallBack_Func = MOSTAFA_UART_CALLBACK;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <main+0xa4>)
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_config.USART_Parity = USART_Parity_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uart_config.USART_WordLength = USART_8_DataBits;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uart_config.USART_StopBits = USART_StopBits_One;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uart_config.USART_MODE = USART_MODE_RX_TX;
 80010aa:	230c      	movs	r3, #12
 80010ac:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &uart_config);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <main+0xa8>)
 80010b6:	f7ff fd7b 	bl	8000bb0 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <main+0xa8>)
 80010bc:	f7ff fe5a 	bl	8000d74 <MCAL_USART_GPIO_Set_Pins>

	SPI_Config config_spi;

	config_spi.Clk_Phase = SPI_Clk_Phase_Second;
 80010c0:	2301      	movs	r3, #1
 80010c2:	81fb      	strh	r3, [r7, #14]
	config_spi.Clk_Polarity = SPI_Clk_Polarity_High;
 80010c4:	2302      	movs	r3, #2
 80010c6:	81bb      	strh	r3, [r7, #12]
	config_spi.Data_Size = SPI_Data_Size_8Bits;
 80010c8:	2300      	movs	r3, #0
 80010ca:	817b      	strh	r3, [r7, #10]
	config_spi.Bit_Orientation = SPI_Orientation_MSB_First;
 80010cc:	2300      	movs	r3, #0
 80010ce:	813b      	strh	r3, [r7, #8]
	config_spi.BaudRate_Prescaler = SPI_BaudRate_Prescaler_8; //Assume SPI is 8Mhz
 80010d0:	2310      	movs	r3, #16
 80010d2:	827b      	strh	r3, [r7, #18]
	config_spi.Communication_MODE = SPI_Directional_2Lines;
 80010d4:	2300      	movs	r3, #0
 80010d6:	80fb      	strh	r3, [r7, #6]

#ifdef MCU_ACT_AS_MASTER
	config_spi.Device_MODE = SPI_Device_MODE_MASTER;
 80010d8:	2304      	movs	r3, #4
 80010da:	80bb      	strh	r3, [r7, #4]
	config_spi.IRQ_Enable = SPI_IRQ_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	82bb      	strh	r3, [r7, #20]
	config_spi.NSS = SPI_NSS_SW_SET;	//Make NSS of Master Idle state High and I will reset it @ sending
 80010e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e4:	823b      	strh	r3, [r7, #16]
	config_spi.PTR_IRQ_CallBack = NULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
	config_spi.IRQ_Enable = SPI_IRQ_RXNEIE_Enable;
	config_spi.NSS = SPI_NSS_HW_Output_Disable;
	config_spi.PTR_IRQ_CallBack = MOSTAFA_SPI_CALLBACK;
#endif

	MCAL_SPI_Init(SPI1, &config_spi);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <main+0xac>)
 80010f0:	f7ff fb20 	bl	8000734 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <main+0xac>)
 80010f6:	f7ff fbc5 	bl	8000884 <MCAL_SPI_GPIO_Set_Pins>
	//As NSS is SW controlled so this is a configuration for GPIO PA4 for it.


#ifdef MCU_ACT_AS_MASTER
	GPIO_PinConfig_t SPI_SW_pin_config;
	SPI_SW_pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80010fa:	2304      	movs	r3, #4
 80010fc:	70bb      	strb	r3, [r7, #2]
	SPI_SW_pin_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80010fe:	2301      	movs	r3, #1
 8001100:	70fb      	strb	r3, [r7, #3]
	SPI_SW_pin_config.GPIO_PinNumber = GPIO_PIN_4;
 8001102:	2310      	movs	r3, #16
 8001104:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOA, &SPI_SW_pin_config);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <main+0xb0>)
 800110c:	f7ff fa02 	bl	8000514 <MCAL_GPIO_Init>

	//Set it high by default
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <main+0xb0>)
 8001116:	f7ff fa7c 	bl	8000612 <MCAL_GPIO_WritePin>
#endif

	while (1)
 800111a:	e7fe      	b.n	800111a <main+0xa2>
 800111c:	0800112d 	.word	0x0800112d
 8001120:	40013800 	.word	0x40013800
 8001124:	40013000 	.word	0x40013000
 8001128:	40010800 	.word	0x40010800

0800112c <MOSTAFA_UART_CALLBACK>:

	}
}

void MOSTAFA_UART_CALLBACK(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
#ifdef MCU_ACT_AS_MASTER
	MCAL_USART_ReceiveData(USART1, &ch, USART_Polling_Disable);
 8001130:	2200      	movs	r2, #0
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <MOSTAFA_UART_CALLBACK+0x3c>)
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MOSTAFA_UART_CALLBACK+0x40>)
 8001136:	f7ff fef1 	bl	8000f1c <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, USART_Polling_Enable);
 800113a:	2201      	movs	r2, #1
 800113c:	490a      	ldr	r1, [pc, #40]	; (8001168 <MOSTAFA_UART_CALLBACK+0x3c>)
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <MOSTAFA_UART_CALLBACK+0x40>)
 8001140:	f7ff fe82 	bl	8000e48 <MCAL_USART_SendData>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //NSS --> LOW to Select Slave
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <MOSTAFA_UART_CALLBACK+0x44>)
 800114a:	f7ff fa62 	bl	8000612 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, SPI_Polling_Enable);
 800114e:	2201      	movs	r2, #1
 8001150:	4905      	ldr	r1, [pc, #20]	; (8001168 <MOSTAFA_UART_CALLBACK+0x3c>)
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <MOSTAFA_UART_CALLBACK+0x48>)
 8001154:	f7ff fcaa 	bl	8000aac <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   //NSS --> Return It High
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MOSTAFA_UART_CALLBACK+0x44>)
 800115e:	f7ff fa58 	bl	8000612 <MCAL_GPIO_WritePin>
#endif
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c8 	.word	0x200000c8
 800116c:	40013800 	.word	0x40013800
 8001170:	40010800 	.word	0x40010800
 8001174:	40013000 	.word	0x40013000

08001178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800117c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011a6:	f000 f811 	bl	80011cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff ff65 	bl	8001078 <main>

080011ae <LoopForever>:

LoopForever:
  b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   r0, =_estack
 80011b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80011bc:	08001254 	.word	0x08001254
  ldr r2, =_sbss
 80011c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80011c4:	200000cc 	.word	0x200000cc

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <__libc_init_array>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	2600      	movs	r6, #0
 80011d0:	4d0c      	ldr	r5, [pc, #48]	; (8001204 <__libc_init_array+0x38>)
 80011d2:	4c0d      	ldr	r4, [pc, #52]	; (8001208 <__libc_init_array+0x3c>)
 80011d4:	1b64      	subs	r4, r4, r5
 80011d6:	10a4      	asrs	r4, r4, #2
 80011d8:	42a6      	cmp	r6, r4
 80011da:	d109      	bne.n	80011f0 <__libc_init_array+0x24>
 80011dc:	f000 f81a 	bl	8001214 <_init>
 80011e0:	2600      	movs	r6, #0
 80011e2:	4d0a      	ldr	r5, [pc, #40]	; (800120c <__libc_init_array+0x40>)
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <__libc_init_array+0x44>)
 80011e6:	1b64      	subs	r4, r4, r5
 80011e8:	10a4      	asrs	r4, r4, #2
 80011ea:	42a6      	cmp	r6, r4
 80011ec:	d105      	bne.n	80011fa <__libc_init_array+0x2e>
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011f4:	4798      	blx	r3
 80011f6:	3601      	adds	r6, #1
 80011f8:	e7ee      	b.n	80011d8 <__libc_init_array+0xc>
 80011fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80011fe:	4798      	blx	r3
 8001200:	3601      	adds	r6, #1
 8001202:	e7f2      	b.n	80011ea <__libc_init_array+0x1e>
 8001204:	0800124c 	.word	0x0800124c
 8001208:	0800124c 	.word	0x0800124c
 800120c:	0800124c 	.word	0x0800124c
 8001210:	08001250 	.word	0x08001250

08001214 <_init>:
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	bf00      	nop
 8001218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800121a:	bc08      	pop	{r3}
 800121c:	469e      	mov	lr, r3
 800121e:	4770      	bx	lr

08001220 <_fini>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr
