
Atmega32_SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000310  2**0
                  ALLOC
  2 .stab         00000ad4  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000adb  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MAX7221_Send>:
	MAX7221_Send(0x0C, 0x01);
}

void MAX7221_Send(uint8_t command,uint8_t data)
{
	MCAL_SPI_SendData_TwoBytes(command, data, SPI_Polling_Enable);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <MCAL_SPI_SendData_TwoBytes>
}
  82:	08 95       	ret

00000084 <MAX7221_Clear_All>:

void MAX7221_Clear_All(void)
{
  84:	1f 93       	push	r17
  86:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t display_index = 1 ; display_index < 9 ; display_index++)
	{
		MAX7221_Send(display_index,0);
  88:	81 2f       	mov	r24, r17
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
	MCAL_SPI_SendData_TwoBytes(command, data, SPI_Polling_Enable);
}

void MAX7221_Clear_All(void)
{
	for (uint8_t display_index = 1 ; display_index < 9 ; display_index++)
  90:	1f 5f       	subi	r17, 0xFF	; 255
  92:	19 30       	cpi	r17, 0x09	; 9
  94:	c9 f7       	brne	.-14     	; 0x88 <MAX7221_Clear_All+0x4>
	{
		MAX7221_Send(display_index,0);
	}
}
  96:	1f 91       	pop	r17
  98:	08 95       	ret

0000009a <MAX7221_init>:
}

void MAX7221_init(void)
{
	//DECODE Mode
	MAX7221_Send(0x09, 0xFF);
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	6f ef       	ldi	r22, 0xFF	; 255
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
	//Intensity
	MAX7221_Send(0x0A, 0x0F);
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	6f e0       	ldi	r22, 0x0F	; 15
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
	//Scan Limit
	MAX7221_Send(0x0B, 0x07);
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	67 e0       	ldi	r22, 0x07	; 7
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
	//Start/Shutdown
	MAX7221_Send(0x0C, 0x01);
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
}
  ba:	08 95       	ret

000000bc <main>:
void MAX7221_init(void);
void MAX7221_Send(uint8_t command,uint8_t data);
void MAX7221_Clear_All(void);
unsigned char buffer;
int main(void)
{
  bc:	af 92       	push	r10
  be:	bf 92       	push	r11
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	29 97       	sbiw	r28, 0x09	; 9
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	SPI_Config Config_spi;

	// SPI Initialization
	Config_spi.MODE = SPI_MODE_Master;
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	89 83       	std	Y+1, r24	; 0x01
	Config_spi.Data_Order = SPI_DataOrder_MSP_First;
  e2:	1a 82       	std	Y+2, r1	; 0x02
	Config_spi.Clk_Polarity = SPI_Clk_Polarity_Low;
  e4:	1b 82       	std	Y+3, r1	; 0x03
	Config_spi.Clk_Phase = SPI_Clk_Phase_First;
  e6:	1c 82       	std	Y+4, r1	; 0x04
	Config_spi.BaudRate_Prescaler = SPI_BaudRate_Prescaler_4;
  e8:	1d 82       	std	Y+5, r1	; 0x05
	Config_spi.Speed = SPI_SPEED_NORMAL;
  ea:	1e 82       	std	Y+6, r1	; 0x06
	Config_spi.Interrupt = SPI_Interrupt_NONE;
  ec:	1f 82       	std	Y+7, r1	; 0x07
	MCAL_SPI_Init(&Config_spi);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 a1 00 	call	0x142	; 0x142 <MCAL_SPI_Init>

	///MAX7221 Initialization
	MAX7221_init();
  f6:	0e 94 4d 00 	call	0x9a	; 0x9a <MAX7221_init>
  fa:	ee 24       	eor	r14, r14
  fc:	e3 94       	inc	r14
  fe:	ff 24       	eor	r15, r15
 100:	f3 94       	inc	r15
	uint8_t counter = 1;
	while(1)
	{
		for (uint8_t display_index = 1 ; display_index < 9 ; display_index++)
		{
			MAX7221_Send(display_index, counter++);
 102:	0f 2e       	mov	r0, r31
 104:	f8 e8       	ldi	r31, 0x88	; 136
 106:	af 2e       	mov	r10, r31
 108:	f3 e1       	ldi	r31, 0x13	; 19
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10e:	08 ec       	ldi	r16, 0xC8	; 200
 110:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(500);
		}
		//Reset MAX7221 Segments
		MAX7221_Clear_All();
 112:	dd 24       	eor	r13, r13
 114:	d3 94       	inc	r13
 116:	0d c0       	rjmp	.+26     	; 0x132 <main+0x76>
	uint8_t counter = 1;
	while(1)
	{
		for (uint8_t display_index = 1 ; display_index < 9 ; display_index++)
		{
			MAX7221_Send(display_index, counter++);
 118:	8f 2d       	mov	r24, r15
 11a:	6e 2d       	mov	r22, r14
 11c:	0e 94 3e 00 	call	0x7c	; 0x7c <MAX7221_Send>
 120:	95 01       	movw	r18, r10
 122:	c8 01       	movw	r24, r16
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d1 f7       	brne	.-12     	; 0x122 <main+0x66>
 12e:	e3 94       	inc	r14
	MAX7221_init();

	uint8_t counter = 1;
	while(1)
	{
		for (uint8_t display_index = 1 ; display_index < 9 ; display_index++)
 130:	f3 94       	inc	r15
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	8f 15       	cp	r24, r15
 136:	80 f7       	brcc	.-32     	; 0x118 <main+0x5c>
		{
			MAX7221_Send(display_index, counter++);
			_delay_ms(500);
		}
		//Reset MAX7221 Segments
		MAX7221_Clear_All();
 138:	0e 94 42 00 	call	0x84	; 0x84 <MAX7221_Clear_All>
 13c:	ed 2c       	mov	r14, r13
 13e:	fd 2c       	mov	r15, r13
 140:	f8 cf       	rjmp	.-16     	; 0x132 <main+0x76>

00000142 <MCAL_SPI_Init>:
 * @param [in] 	-Config_SPI: All the SPI configuration
 * @retval 		-none
 * Note			-Support only asynchronous
 */
void MCAL_SPI_Init(SPI_Config *config_SPI)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	fc 01       	movw	r30, r24
	uint8_t SPCR_temp = 0,SPSR_temp = 0;
	Global_SPI_Confing = *config_SPI;
 148:	c1 e6       	ldi	r28, 0x61	; 97
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	dc 01       	movw	r26, r24
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	0d 90       	ld	r0, X+
 152:	09 92       	st	Y+, r0
 154:	81 50       	subi	r24, 0x01	; 1
 156:	e1 f7       	brne	.-8      	; 0x150 <MCAL_SPI_Init+0xe>

	//Device MODE
	SPCR_temp |= config_SPI->MODE;
 158:	20 81       	ld	r18, Z
	//Data Order
	SPCR_temp |= config_SPI->Data_Order;
 15a:	31 81       	ldd	r19, Z+1	; 0x01
	//Clock Polarity
	SPCR_temp |= config_SPI->Clk_Polarity;
 15c:	62 81       	ldd	r22, Z+2	; 0x02
	//Clock Phase
	SPCR_temp |= config_SPI->Clk_Phase;
 15e:	53 81       	ldd	r21, Z+3	; 0x03
	//BaudRate Prescaler
	SPCR_temp |= config_SPI->BaudRate_Prescaler;
 160:	44 81       	ldd	r20, Z+4	; 0x04
	//Speed
	SPSR_temp |= config_SPI->Speed;
 162:	75 81       	ldd	r23, Z+5	; 0x05

	//Interrupt
	if (config_SPI->Interrupt == SPI_Interrupt_Enable)
 164:	96 81       	ldd	r25, Z+6	; 0x06
 166:	90 38       	cpi	r25, 0x80	; 128
 168:	29 f4       	brne	.+10     	; 0x174 <MCAL_SPI_Init+0x32>
	{
		//Enable Global Interrupt
		SREG |= (1 << 7);
 16a:	ef e5       	ldi	r30, 0x5F	; 95
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 68       	ori	r24, 0x80	; 128
 172:	80 83       	st	Z, r24
	}
	SPCR_temp |= config_SPI->Interrupt;


	//Set IO DDB According to Master/Slave
	if (config_SPI->MODE == SPI_MODE_Master)
 174:	20 31       	cpi	r18, 0x10	; 16
 176:	71 f4       	brne	.+28     	; 0x194 <MCAL_SPI_Init+0x52>
	{
		DDRB &= ~(0b1111 << DDB4);
 178:	e7 e3       	ldi	r30, 0x37	; 55
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	80 83       	st	Z, r24
		DDRB |= (0b1011 << DDB4);
 182:	80 81       	ld	r24, Z
 184:	80 6b       	ori	r24, 0xB0	; 176
 186:	80 83       	st	Z, r24

		//Set Slave Select to High (Default)
		PORTB |= (1 << PORTB4);
 188:	e8 e3       	ldi	r30, 0x38	; 56
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 61       	ori	r24, 0x10	; 16
 190:	80 83       	st	Z, r24
 192:	0a c0       	rjmp	.+20     	; 0x1a8 <MCAL_SPI_Init+0x66>
	}
	else if (config_SPI->MODE == SPI_MODE_Slave)
 194:	22 23       	and	r18, r18
 196:	41 f4       	brne	.+16     	; 0x1a8 <MCAL_SPI_Init+0x66>
	{
		DDRB &= ~(0b1111 << DDB4);
 198:	e7 e3       	ldi	r30, 0x37	; 55
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 83       	st	Z, r24
		DDRB |= (0b0100 << DDB4);
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24
	Global_SPI_Confing = *config_SPI;

	//Device MODE
	SPCR_temp |= config_SPI->MODE;
	//Data Order
	SPCR_temp |= config_SPI->Data_Order;
 1a8:	82 2f       	mov	r24, r18
 1aa:	83 2b       	or	r24, r19
	//Clock Polarity
	SPCR_temp |= config_SPI->Clk_Polarity;
 1ac:	80 64       	ori	r24, 0x40	; 64
	//Clock Phase
	SPCR_temp |= config_SPI->Clk_Phase;
 1ae:	86 2b       	or	r24, r22
	//BaudRate Prescaler
	SPCR_temp |= config_SPI->BaudRate_Prescaler;
 1b0:	85 2b       	or	r24, r21
	if (config_SPI->Interrupt == SPI_Interrupt_Enable)
	{
		//Enable Global Interrupt
		SREG |= (1 << 7);
	}
	SPCR_temp |= config_SPI->Interrupt;
 1b2:	84 2b       	or	r24, r20
		DDRB &= ~(0b1111 << DDB4);
		DDRB |= (0b0100 << DDB4);
	}

	//Enable SPI
	SPCR_temp |= (1 << SPE);
 1b4:	89 2b       	or	r24, r25

	//Write To Actual Registers
	SPCR = SPCR_temp;
 1b6:	8d b9       	out	0x0d, r24	; 13
	SPSR = SPSR_temp;
 1b8:	7e b9       	out	0x0e, r23	; 14
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <MCAL_SPI_DeInit>:
 * @retval 		-none
 * Note			-Support only asynchronous
 */
void MCAL_SPI_DeInit(void)
{
	SPCR = 0x00;
 1c0:	1d b8       	out	0x0d, r1	; 13
	SPSR = 0x00;
 1c2:	1e b8       	out	0x0e, r1	; 14

	//Disable Interrupt
	SREG &= ~(1 << 7);
 1c4:	ef e5       	ldi	r30, 0x5F	; 95
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 77       	andi	r24, 0x7F	; 127
 1cc:	80 83       	st	Z, r24
}
 1ce:	08 95       	ret

000001d0 <MCAL_SPI_SendData>:
 * @param [in] 	-PollingEn: Enum variable that provide polling capability to the send function
 * @retval 		-none
 * Note			-Support only asynchronous
 */
void MCAL_SPI_SendData(uint8_t *pTxBuffer , enum SPI_Polling Polling)
{
 1d0:	dc 01       	movw	r26, r24
	//Set Slave Select to Low (Selected)
	PORTB &= ~(1 << PORTB4);
 1d2:	e8 e3       	ldi	r30, 0x38	; 56
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	80 83       	st	Z, r24

	SPDR = *pTxBuffer;
 1dc:	8c 91       	ld	r24, X
 1de:	8f b9       	out	0x0f, r24	; 15

	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
 1e0:	61 30       	cpi	r22, 0x01	; 1
 1e2:	29 f4       	brne	.+10     	; 0x1ee <MCAL_SPI_SendData+0x1e>
		while(!(SPSR & (1<<SPIF)));
 1e4:	ee e2       	ldi	r30, 0x2E	; 46
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	ec f7       	brge	.-6      	; 0x1e8 <MCAL_SPI_SendData+0x18>

	//Set Slave Select to High (Default)
	PORTB |= (1 << PORTB4);
 1ee:	e8 e3       	ldi	r30, 0x38	; 56
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	80 83       	st	Z, r24
}
 1f8:	08 95       	ret

000001fa <MCAL_SPI_SendData_TwoBytes>:
 * Note			-Support only asynchronous
 */
void MCAL_SPI_SendData_TwoBytes(uint8_t first_byte , uint8_t second_byte, enum SPI_Polling Polling)
{
	//Set Slave Select to Low (Selected)
	PORTB &= ~(1 << PORTB4);
 1fa:	e8 e3       	ldi	r30, 0x38	; 56
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	9f 7e       	andi	r25, 0xEF	; 239
 202:	90 83       	st	Z, r25

	SPDR = first_byte;
 204:	8f b9       	out	0x0f, r24	; 15
	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	31 f4       	brne	.+12     	; 0x216 <MCAL_SPI_SendData_TwoBytes+0x1c>
		while(!(SPSR & (1<<SPIF)));
 20a:	ee e2       	ldi	r30, 0x2E	; 46
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	ec f7       	brge	.-6      	; 0x20e <MCAL_SPI_SendData_TwoBytes+0x14>
 214:	0b c0       	rjmp	.+22     	; 0x22c <MCAL_SPI_SendData_TwoBytes+0x32>

	SPDR = second_byte;
 216:	6f b9       	out	0x0f, r22	; 15
 218:	03 c0       	rjmp	.+6      	; 0x220 <MCAL_SPI_SendData_TwoBytes+0x26>
	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
		while(!(SPSR & (1<<SPIF)));
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <MCAL_SPI_SendData_TwoBytes+0x20>

	//Set Slave Select to High (Default)
	PORTB |= (1 << PORTB4);
 220:	e8 e3       	ldi	r30, 0x38	; 56
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 61       	ori	r24, 0x10	; 16
 228:	80 83       	st	Z, r24

}
 22a:	08 95       	ret
	SPDR = first_byte;
	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
		while(!(SPSR & (1<<SPIF)));

	SPDR = second_byte;
 22c:	6f b9       	out	0x0f, r22	; 15
	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
		while(!(SPSR & (1<<SPIF)));
 22e:	ee e2       	ldi	r30, 0x2E	; 46
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	f3 cf       	rjmp	.-26     	; 0x21a <MCAL_SPI_SendData_TwoBytes+0x20>

00000234 <MCAL_SPI_ReceiveData>:
 * Note			-Support only asynchronous
 */


void MCAL_SPI_ReceiveData(uint8_t *pRxBuffer , enum SPI_Polling Polling)
{
 234:	dc 01       	movw	r26, r24
	//Wait for transmission to be complete
	if (Polling == SPI_Polling_Enable)
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	29 f4       	brne	.+10     	; 0x244 <MCAL_SPI_ReceiveData+0x10>
		while(!(SPSR & (1<<SPIF)));
 23a:	ee e2       	ldi	r30, 0x2E	; 46
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	88 23       	and	r24, r24
 242:	ec f7       	brge	.-6      	; 0x23e <MCAL_SPI_ReceiveData+0xa>

	*pRxBuffer = SPDR;
 244:	8f b1       	in	r24, 0x0f	; 15
 246:	8c 93       	st	X, r24
}
 248:	08 95       	ret

0000024a <__vector_12>:
* ===========================================================================================
*/


ISR(SPI_STC_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	Global_SPI_Confing.PTR_IRQ_CallBack();
 26c:	e0 91 68 00 	lds	r30, 0x0068
 270:	f0 91 69 00 	lds	r31, 0x0069
 274:	09 95       	icall
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
