
STM32F103xx_UART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000cdc  08000cdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cfc  08000cfc  00010d04  2**0
                  CONTENTS
  4 .ARM          00000000  08000cfc  08000cfc  00010d04  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cfc  08000d04  00010d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cfc  08000cfc  00010cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d00  08000d00  00010d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000000  08000d04  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000d04  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d04  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001651  00000000  00000000  00010d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d6  00000000  00000000  0001237e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a70  00000000  00000000  00012a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  000134c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  00013690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000285b  00000000  00000000  00013800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002978  00000000  00000000  0001605b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d2f  00000000  00000000  000189d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00022702  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000058c  00000000  00000000  00022754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cc4 	.word	0x08000cc4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cc4 	.word	0x08000cc4

08000170 <EXTI0_IRQHandler>:



/* EXTI Line0 interrupt*/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function

	Global_PTR_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

/* EXTI Line1 interrupt*/
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:


/* EXTI Line2 interrupt*/
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:


/* EXTI Line3 interrupt*/
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:


/* EXTI Line4 interrupt*/
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//Call The CallBack Function
	Global_PTR_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:


/* EXTI Line[9:5] interrupts*/
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) { EXTI->PR |= (1<<5);	Global_PTR_IRQ_CallBack[5](); }
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <EXTI9_5_IRQHandler+0x24>
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a24      	ldr	r2, [pc, #144]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	else if (EXTI->PR & (1 << 6)) { EXTI->PR |= (1<<6);	Global_PTR_IRQ_CallBack[6](); }
	else if (EXTI->PR & (1 << 7)) { EXTI->PR |= (1<<7);	Global_PTR_IRQ_CallBack[7](); }
	else if (EXTI->PR & (1 << 8)) { EXTI->PR |= (1<<8);	Global_PTR_IRQ_CallBack[8](); }
	else if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1<<9);	Global_PTR_IRQ_CallBack[9](); }
}
 8000246:	e03e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 6)) { EXTI->PR |= (1<<6);	Global_PTR_IRQ_CallBack[6](); }
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000250:	2b00      	cmp	r3, #0
 8000252:	d009      	beq.n	8000268 <EXTI9_5_IRQHandler+0x44>
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800025a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025e:	6153      	str	r3, [r2, #20]
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4798      	blx	r3
}
 8000266:	e02e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 7)) { EXTI->PR |= (1<<7);	Global_PTR_IRQ_CallBack[7](); }
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <EXTI9_5_IRQHandler+0x64>
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6153      	str	r3, [r2, #20]
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4798      	blx	r3
}
 8000286:	e01e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR & (1 << 8)) { EXTI->PR |= (1<<8);	Global_PTR_IRQ_CallBack[8](); }
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000290:	2b00      	cmp	r3, #0
 8000292:	d009      	beq.n	80002a8 <EXTI9_5_IRQHandler+0x84>
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4798      	blx	r3
}
 80002a6:	e00e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1<<9);	Global_PTR_IRQ_CallBack[9](); }
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d008      	beq.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6153      	str	r3, [r2, #20]
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c4:	4798      	blx	r3
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <EXTI15_10_IRQHandler>:


/* EXTI Line[15:10] interrupts*/
void EXTI15_10_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//Clear Pending register (EXTI_PR)
	//EXTI->PR |= (0b111111 << 10);
	if (EXTI->PR & (1 << 10)) { EXTI->PR |= (1<<10);	Global_PTR_IRQ_CallBack[10](); }
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <EXTI15_10_IRQHandler+0x24>
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6153      	str	r3, [r2, #20]
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	4798      	blx	r3
	else if (EXTI->PR & (1 << 11)) { EXTI->PR |= (1<<11);	Global_PTR_IRQ_CallBack[11](); }
	else if (EXTI->PR & (1 << 12)) { EXTI->PR |= (1<<12);	Global_PTR_IRQ_CallBack[12](); }
	else if (EXTI->PR & (1 << 13)) { EXTI->PR |= (1<<13);	Global_PTR_IRQ_CallBack[13](); }
	else if (EXTI->PR & (1 << 14)) { EXTI->PR |= (1<<14);	Global_PTR_IRQ_CallBack[14](); }
	else if (EXTI->PR & (1 << 15)) { EXTI->PR |= (1<<15);	Global_PTR_IRQ_CallBack[15](); }
}
 80002f6:	e04e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 11)) { EXTI->PR |= (1<<11);	Global_PTR_IRQ_CallBack[11](); }
 80002f8:	4b28      	ldr	r3, [pc, #160]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000300:	2b00      	cmp	r3, #0
 8000302:	d009      	beq.n	8000318 <EXTI15_10_IRQHandler+0x44>
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800030a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800030e:	6153      	str	r3, [r2, #20]
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000314:	4798      	blx	r3
}
 8000316:	e03e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 12)) { EXTI->PR |= (1<<12);	Global_PTR_IRQ_CallBack[12](); }
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000320:	2b00      	cmp	r3, #0
 8000322:	d009      	beq.n	8000338 <EXTI15_10_IRQHandler+0x64>
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800032a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032e:	6153      	str	r3, [r2, #20]
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4798      	blx	r3
}
 8000336:	e02e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 13)) { EXTI->PR |= (1<<13);	Global_PTR_IRQ_CallBack[13](); }
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d009      	beq.n	8000358 <EXTI15_10_IRQHandler+0x84>
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6153      	str	r3, [r2, #20]
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	4798      	blx	r3
}
 8000356:	e01e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 14)) { EXTI->PR |= (1<<14);	Global_PTR_IRQ_CallBack[14](); }
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <EXTI15_10_IRQHandler+0xa4>
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6153      	str	r3, [r2, #20]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000374:	4798      	blx	r3
}
 8000376:	e00e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR & (1 << 15)) { EXTI->PR |= (1<<15);	Global_PTR_IRQ_CallBack[15](); }
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI15_10_IRQHandler+0xc2>
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800038a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038e:	6153      	str	r3, [r2, #20]
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000394:	4798      	blx	r3
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010400 	.word	0x40010400
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <Get_CRLH_Position>:
 *  Created on: Oct 19, 2023
 *      Author: AEMYS
 */
#include "STM32F103C6T6_GPIO_Driver.h"
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003b4:	f000 80a5 	beq.w	8000502 <Get_CRLH_Position+0x15e>
 80003b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003bc:	f300 80a3 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003c4:	f000 809b 	beq.w	80004fe <Get_CRLH_Position+0x15a>
 80003c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003cc:	f300 809b 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d4:	f000 8091 	beq.w	80004fa <Get_CRLH_Position+0x156>
 80003d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003dc:	f300 8093 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003e4:	f000 8087 	beq.w	80004f6 <Get_CRLH_Position+0x152>
 80003e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003ec:	f300 808b 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f4:	d07d      	beq.n	80004f2 <Get_CRLH_Position+0x14e>
 80003f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003fa:	f300 8084 	bgt.w	8000506 <Get_CRLH_Position+0x162>
 80003fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000402:	d074      	beq.n	80004ee <Get_CRLH_Position+0x14a>
 8000404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000408:	dc7d      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 800040a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800040e:	d06c      	beq.n	80004ea <Get_CRLH_Position+0x146>
 8000410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000414:	dc77      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 8000416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800041a:	d064      	beq.n	80004e6 <Get_CRLH_Position+0x142>
 800041c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000420:	dc71      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 8000422:	2b80      	cmp	r3, #128	; 0x80
 8000424:	d05d      	beq.n	80004e2 <Get_CRLH_Position+0x13e>
 8000426:	2b80      	cmp	r3, #128	; 0x80
 8000428:	dc6d      	bgt.n	8000506 <Get_CRLH_Position+0x162>
 800042a:	2b20      	cmp	r3, #32
 800042c:	dc48      	bgt.n	80004c0 <Get_CRLH_Position+0x11c>
 800042e:	2b00      	cmp	r3, #0
 8000430:	dd69      	ble.n	8000506 <Get_CRLH_Position+0x162>
 8000432:	3b01      	subs	r3, #1
 8000434:	2b1f      	cmp	r3, #31
 8000436:	d866      	bhi.n	8000506 <Get_CRLH_Position+0x162>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <Get_CRLH_Position+0x9c>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	080004c7 	.word	0x080004c7
 8000444:	080004cb 	.word	0x080004cb
 8000448:	08000507 	.word	0x08000507
 800044c:	080004cf 	.word	0x080004cf
 8000450:	08000507 	.word	0x08000507
 8000454:	08000507 	.word	0x08000507
 8000458:	08000507 	.word	0x08000507
 800045c:	080004d3 	.word	0x080004d3
 8000460:	08000507 	.word	0x08000507
 8000464:	08000507 	.word	0x08000507
 8000468:	08000507 	.word	0x08000507
 800046c:	08000507 	.word	0x08000507
 8000470:	08000507 	.word	0x08000507
 8000474:	08000507 	.word	0x08000507
 8000478:	08000507 	.word	0x08000507
 800047c:	080004d7 	.word	0x080004d7
 8000480:	08000507 	.word	0x08000507
 8000484:	08000507 	.word	0x08000507
 8000488:	08000507 	.word	0x08000507
 800048c:	08000507 	.word	0x08000507
 8000490:	08000507 	.word	0x08000507
 8000494:	08000507 	.word	0x08000507
 8000498:	08000507 	.word	0x08000507
 800049c:	08000507 	.word	0x08000507
 80004a0:	08000507 	.word	0x08000507
 80004a4:	08000507 	.word	0x08000507
 80004a8:	08000507 	.word	0x08000507
 80004ac:	08000507 	.word	0x08000507
 80004b0:	08000507 	.word	0x08000507
 80004b4:	08000507 	.word	0x08000507
 80004b8:	08000507 	.word	0x08000507
 80004bc:	080004db 	.word	0x080004db
 80004c0:	2b40      	cmp	r3, #64	; 0x40
 80004c2:	d00c      	beq.n	80004de <Get_CRLH_Position+0x13a>
 80004c4:	e01f      	b.n	8000506 <Get_CRLH_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e01e      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80004ca:	2304      	movs	r3, #4
 80004cc:	e01c      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80004ce:	2308      	movs	r3, #8
 80004d0:	e01a      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80004d2:	230c      	movs	r3, #12
 80004d4:	e018      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80004d6:	2310      	movs	r3, #16
 80004d8:	e016      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80004da:	2314      	movs	r3, #20
 80004dc:	e014      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80004de:	2318      	movs	r3, #24
 80004e0:	e012      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80004e2:	231c      	movs	r3, #28
 80004e4:	e010      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	e00e      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	e00c      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80004ee:	2308      	movs	r3, #8
 80004f0:	e00a      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80004f2:	230c      	movs	r3, #12
 80004f4:	e008      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80004f6:	2310      	movs	r3, #16
 80004f8:	e006      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004fa:	2314      	movs	r3, #20
 80004fc:	e004      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004fe:	2318      	movs	r3, #24
 8000500:	e002      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000502:	231c      	movs	r3, #28
 8000504:	e000      	b.n	8000508 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note-			-stm32f103c8t6 has ports A,B,C,D,E but only there is a pins for
 * 					ports A,B and a few pins from C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Pins from 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Pins from 8 >>> 15
	volatile uint32_t* config_register = NULL;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

	//A pointer to carry register to  be configured
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &(GPIOx->CRL):&(GPIOx->CRH);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	2bff      	cmp	r3, #255	; 0xff
 800052c:	d801      	bhi.n	8000532 <MCAL_GPIO_Init+0x1e>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	e001      	b.n	8000536 <MCAL_GPIO_Init+0x22>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] and MODEy[1:0]
	*config_register &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff31 	bl	80003a4 <Get_CRLH_Position>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	230f      	movs	r3, #15
 8000548:	4093      	lsls	r3, r2
 800054a:	43da      	mvns	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	401a      	ands	r2, r3
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	601a      	str	r2, [r3, #0]
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD))
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	789b      	ldrb	r3, [r3, #2]
 800055a:	2b06      	cmp	r3, #6
 800055c:	d00b      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	789b      	ldrb	r3, [r3, #2]
 8000562:	2b07      	cmp	r3, #7
 8000564:	d007      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	789b      	ldrb	r3, [r3, #2]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d003      	beq.n	8000576 <MCAL_GPIO_Init+0x62>
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d10e      	bne.n	8000594 <MCAL_GPIO_Init+0x80>
		{
			//Set CNFy[1:0] and MODEy[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F );
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	3b04      	subs	r3, #4
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	b25b      	sxtb	r3, r3
 8000586:	4313      	orrs	r3, r2
 8000588:	b25b      	sxtb	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 030f 	and.w	r3, r3, #15
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e02c      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
	//If Pin is input MODE = 00 Input Mode (Reset state)
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <MCAL_GPIO_Init+0x90>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d107      	bne.n	80005b4 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0F );
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 030f 	and.w	r3, r3, #15
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e01c      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
		else if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF))
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d102      	bne.n	80005c2 <MCAL_GPIO_Init+0xae>
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x00) & 0x0F ); //Consider it as input floating
 80005bc:	2304      	movs	r3, #4
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e015      	b.n	80005ee <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//Set CNFy[1:0] and MODEy[1:0] = 00
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x00) & 0x0F );
 80005c2:	2308      	movs	r3, #8
 80005c4:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d107      	bne.n	80005de <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	8812      	ldrh	r2, [r2, #0]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	e007      	b.n	80005ee <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	8812      	ldrh	r2, [r2, #0]
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	401a      	ands	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60da      	str	r2, [r3, #12]
			}
		}

	}
	(*config_register) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80005ee:	7bfc      	ldrb	r4, [r7, #15]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fed5 	bl	80003a4 <Get_CRLH_Position>
 80005fa:	4603      	mov	r3, r0
 80005fc:	fa04 f203 	lsl.w	r2, r4, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	601a      	str	r2, [r3, #0]

}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bd90      	pop	{r4, r7, pc}
	...

08000614 <MCAL_RCC_GetSYSCLKFreq>:
 * @retval 		-none
 * Note			-As RCC is corresponding to GPIO pins you must to Enable RCC for GPIO port and set the AFIO for pin to be used as RCC
 */

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	switch( ((RCC->CFGR & (0b11 << 2)) >> 2) )
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	089b      	lsrs	r3, r3, #2
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	2b03      	cmp	r3, #3
 8000624:	d812      	bhi.n	800064c <MCAL_RCC_GetSYSCLKFreq+0x38>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <MCAL_RCC_GetSYSCLKFreq+0x18>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000641 	.word	0x08000641
 8000634:	08000645 	.word	0x08000645
 8000638:	08000649 	.word	0x08000649
	{
		case 0b00:
			return HSI_CLK;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MCAL_RCC_GetSYSCLKFreq+0x48>)
 800063e:	e006      	b.n	800064e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b01:
			return HSE_CLK;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MCAL_RCC_GetSYSCLKFreq+0x4c>)
 8000642:	e004      	b.n	800064e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b10:
			return 16000000;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MCAL_RCC_GetSYSCLKFreq+0x4c>)
 8000646:	e002      	b.n	800064e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
		case 0b11:
			return 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e000      	b.n	800064e <MCAL_RCC_GetSYSCLKFreq+0x3a>
			break;
	}
	return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	007a1200 	.word	0x007a1200
 8000660:	00f42400 	.word	0x00f42400

08000664 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	uint32_t SYS_CLK = MCAL_RCC_GetSYSCLKFreq();
 800066a:	f7ff ffd3 	bl	8000614 <MCAL_RCC_GetSYSCLKFreq>
 800066e:	6078      	str	r0, [r7, #4]

	return (SYS_CLK >> AHBPrescTable[ ( RCC->CFGR & (0b1111 << 4) >> 4 ) ]);
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MCAL_RCC_GetHCLKFreq+0x28>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	4a05      	ldr	r2, [pc, #20]	; (8000690 <MCAL_RCC_GetHCLKFreq+0x2c>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	08000cdc 	.word	0x08000cdc

08000694 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint32_t HCLK = MCAL_RCC_GetHCLKFreq();
 800069a:	f7ff ffe3 	bl	8000664 <MCAL_RCC_GetHCLKFreq>
 800069e:	6078      	str	r0, [r7, #4]
	return (HCLK >> APBPrescTable[ ( RCC->CFGR & (0b111 << 8) >> 8 ) ]);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MCAL_RCC_GetPCLK1Freq+0x28>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f003 0307 	and.w	r3, r3, #7
 80006a8:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <MCAL_RCC_GetPCLK1Freq+0x2c>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	08000cec 	.word	0x08000cec

080006c4 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	uint32_t HCLK = MCAL_RCC_GetHCLKFreq();
 80006ca:	f7ff ffcb 	bl	8000664 <MCAL_RCC_GetHCLKFreq>
 80006ce:	6078      	str	r0, [r7, #4]
	return (HCLK >> APBPrescTable[ ( RCC->CFGR & (0b111 << 11) >> 11 ) ]);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MCAL_RCC_GetPCLK2Freq+0x28>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f003 0307 	and.w	r3, r3, #7
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <MCAL_RCC_GetPCLK2Freq+0x2c>)
 80006da:	5cd3      	ldrb	r3, [r2, r3]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	40d3      	lsrs	r3, r2
//			break;
//		default:
//			break;
//	}
//	return 0;
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	08000cec 	.word	0x08000cec

080006f4 <MCAL_USART_Init>:
 * @param [in] 	-Config_USARTx: All the UART configuration
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_Init(USART_TypeDef *USARTx, USART_Config *Config_USARTx)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	if(USARTx == USART1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a66      	ldr	r2, [pc, #408]	; (800089c <MCAL_USART_Init+0x1a8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d108      	bne.n	8000718 <MCAL_USART_Init+0x24>
		Global_USART_Config[0] = *Config_USARTx;
 8000706:	4a66      	ldr	r2, [pc, #408]	; (80008a0 <MCAL_USART_Init+0x1ac>)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	4614      	mov	r4, r2
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	682b      	ldr	r3, [r5, #0]
 8000714:	6023      	str	r3, [r4, #0]
 8000716:	e01a      	b.n	800074e <MCAL_USART_Init+0x5a>
	else if (USARTx == USART2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a62      	ldr	r2, [pc, #392]	; (80008a4 <MCAL_USART_Init+0x1b0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d109      	bne.n	8000734 <MCAL_USART_Init+0x40>
		Global_USART_Config[1] = *Config_USARTx;
 8000720:	4b5f      	ldr	r3, [pc, #380]	; (80008a0 <MCAL_USART_Init+0x1ac>)
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	f103 0414 	add.w	r4, r3, #20
 8000728:	4615      	mov	r5, r2
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	682b      	ldr	r3, [r5, #0]
 8000730:	6023      	str	r3, [r4, #0]
 8000732:	e00c      	b.n	800074e <MCAL_USART_Init+0x5a>
	else if (USARTx == USART3)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a5c      	ldr	r2, [pc, #368]	; (80008a8 <MCAL_USART_Init+0x1b4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d108      	bne.n	800074e <MCAL_USART_Init+0x5a>
		Global_USART_Config[2] = *Config_USARTx;
 800073c:	4b58      	ldr	r3, [pc, #352]	; (80008a0 <MCAL_USART_Init+0x1ac>)
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000744:	4615      	mov	r5, r2
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	6023      	str	r3, [r4, #0]

	//Enable Clock for Given USART
	if(USARTx == USART1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a52      	ldr	r2, [pc, #328]	; (800089c <MCAL_USART_Init+0x1a8>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <MCAL_USART_Init+0x70>
		RCC_USART1_CLK_EN();
 8000756:	4b55      	ldr	r3, [pc, #340]	; (80008ac <MCAL_USART_Init+0x1b8>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a54      	ldr	r2, [pc, #336]	; (80008ac <MCAL_USART_Init+0x1b8>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	e014      	b.n	800078e <MCAL_USART_Init+0x9a>
	else if (USARTx == USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a4f      	ldr	r2, [pc, #316]	; (80008a4 <MCAL_USART_Init+0x1b0>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <MCAL_USART_Init+0x86>
		RCC_USART2_CLK_EN();
 800076c:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <MCAL_USART_Init+0x1b8>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a4e      	ldr	r2, [pc, #312]	; (80008ac <MCAL_USART_Init+0x1b8>)
 8000772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	e009      	b.n	800078e <MCAL_USART_Init+0x9a>
	else if (USARTx == USART3)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a4a      	ldr	r2, [pc, #296]	; (80008a8 <MCAL_USART_Init+0x1b4>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d105      	bne.n	800078e <MCAL_USART_Init+0x9a>
		RCC_USART3_CLK_EN();
 8000782:	4b4a      	ldr	r3, [pc, #296]	; (80008ac <MCAL_USART_Init+0x1b8>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a49      	ldr	r2, [pc, #292]	; (80008ac <MCAL_USART_Init+0x1b8>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078c:	61d3      	str	r3, [r2, #28]

	//Enable USART module Bit 13 UE:USART_CR1
	USARTx->CR1 |= (1 << 13);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60da      	str	r2, [r3, #12]

	//Enable Tx/Rx according to user config.
	USARTx->CR1 |= Config_USARTx->USART_MODE;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60da      	str	r2, [r3, #12]

	//Payload Width
	USARTx->CR1 |= Config_USARTx->USART_WordLength;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	7a12      	ldrb	r2, [r2, #8]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60da      	str	r2, [r3, #12]

	//Parity Config
	USARTx->CR1 |= Config_USARTx->USART_Parity;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	7a52      	ldrb	r2, [r2, #9]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60da      	str	r2, [r3, #12]

	//Stop bits config
	USARTx->CR2 |= Config_USARTx->USART_StopBits;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	7a92      	ldrb	r2, [r2, #10]
 80007cc:	431a      	orrs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	611a      	str	r2, [r3, #16]

	//Hardware Flow control Config
	USARTx->CR3 |= Config_USARTx->USART_FlowCtrl;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	7ad2      	ldrb	r2, [r2, #11]
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	615a      	str	r2, [r3, #20]


	//Baud Rate Config
	uint32_t pclk;
	if(USARTx == USART1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a2e      	ldr	r2, [pc, #184]	; (800089c <MCAL_USART_Init+0x1a8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d103      	bne.n	80007f0 <MCAL_USART_Init+0xfc>
		pclk = MCAL_RCC_GetPCLK2Freq();
 80007e8:	f7ff ff6c 	bl	80006c4 <MCAL_RCC_GetPCLK2Freq>
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	e002      	b.n	80007f6 <MCAL_USART_Init+0x102>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 80007f0:	f7ff ff50 	bl	8000694 <MCAL_RCC_GetPCLK1Freq>
 80007f4:	60f8      	str	r0, [r7, #12]

	USARTx->BRR = USART_BRR(pclk,Config_USARTx->USART_BaudRate);
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009a      	lsls	r2, r3, #2
 8000800:	441a      	add	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	fbb2 f2f3 	udiv	r2, r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	fbb1 f3f3 	udiv	r3, r1, r3
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	fb01 f303 	mul.w	r3, r1, r3
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MCAL_USART_Init+0x1bc>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	095a      	lsrs	r2, r3, #5
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	68f9      	ldr	r1, [r7, #12]
 8000832:	fbb1 f3f3 	udiv	r3, r1, r3
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	609a      	str	r2, [r3, #8]

	//Enable USART Interrupts
	if(Config_USARTx->USART_IRQ_Enable != USART_IRQ_Enable_NONE)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	7b1b      	ldrb	r3, [r3, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d026      	beq.n	8000894 <MCAL_USART_Init+0x1a0>
	{
		USARTx->CR1 |= (Config_USARTx ->USART_IRQ_Enable);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	7b12      	ldrb	r2, [r2, #12]
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]

		//Enable Interrupt for Given USART
		if(USARTx == USART1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <MCAL_USART_Init+0x1a8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <MCAL_USART_Init+0x176>
			NVIC_USART1_EN();
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6013      	str	r3, [r2, #0]
			NVIC_USART1_EN();
		else if (USARTx == USART3)
			NVIC_USART1_EN();
	}

}
 8000868:	e014      	b.n	8000894 <MCAL_USART_Init+0x1a0>
		else if (USARTx == USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <MCAL_USART_Init+0x1b0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <MCAL_USART_Init+0x18c>
			NVIC_USART1_EN();
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	e009      	b.n	8000894 <MCAL_USART_Init+0x1a0>
		else if (USARTx == USART3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MCAL_USART_Init+0x1b4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <MCAL_USART_Init+0x1a0>
			NVIC_USART1_EN();
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <MCAL_USART_Init+0x1c0>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bdb0      	pop	{r4, r5, r7, pc}
 800089c:	40013800 	.word	0x40013800
 80008a0:	2000005c 	.word	0x2000005c
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40004800 	.word	0x40004800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	51eb851f 	.word	0x51eb851f
 80008b4:	e000e104 	.word	0xe000e104

080008b8 <MCAL_USART_GPIO_Set_Pins>:
 * @param [in] 	-USARTx: where x can be (1,2,3 depending on the device used)
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_GPIO_Set_Pins(USART_TypeDef *USARTx)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t usart_pins_config;
	if (USARTx == USART1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d119      	bne.n	80008fc <MCAL_USART_GPIO_Set_Pins+0x44>
	{
		//Tx = PA9
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008c8:	2306      	movs	r3, #6
 80008ca:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_9;
 80008d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d4:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <MCAL_USART_GPIO_Set_Pins+0xc4>)
 80008de:	f7ff fe19 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PA10
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_10;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MCAL_USART_GPIO_Set_Pins+0xc4>)
 80008f8:	f7ff fe0c 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_12;
			MCAL_GPIO_Init(GPIOA, &usart_pins_config);
		}

	}
	if (USARTx == USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a20      	ldr	r2, [pc, #128]	; (8000980 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d117      	bne.n	8000934 <MCAL_USART_GPIO_Set_Pins+0x7c>
	{
		//Tx = PA2
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000904:	2306      	movs	r3, #6
 8000906:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_2;
 800090c:	2304      	movs	r3, #4
 800090e:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4819      	ldr	r0, [pc, #100]	; (800097c <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000918:	f7ff fdfc 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PA3
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800091c:	2301      	movs	r3, #1
 800091e:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_3;
 8000924:	2308      	movs	r3, #8
 8000926:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &usart_pins_config);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000930:	f7ff fdf0 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_1;
			MCAL_GPIO_Init(GPIOA, &usart_pins_config);
		}

	}
	if (USARTx == USART3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MCAL_USART_GPIO_Set_Pins+0xcc>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d119      	bne.n	8000970 <MCAL_USART_GPIO_Set_Pins+0xb8>
	{
		//Tx = PB10
		usart_pins_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800093c:	2306      	movs	r3, #6
 800093e:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10MHz;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_10;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_pins_config);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MCAL_USART_GPIO_Set_Pins+0xd0>)
 8000952:	f7ff fddf 	bl	8000514 <MCAL_GPIO_Init>

		//Rx = PB11
		usart_pins_config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000956:	2301      	movs	r3, #1
 8000958:	73bb      	strb	r3, [r7, #14]
		usart_pins_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
		usart_pins_config.GPIO_PinNumber = GPIO_PIN_11;
 800095e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000962:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_pins_config);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <MCAL_USART_GPIO_Set_Pins+0xd0>)
 800096c:	f7ff fdd2 	bl	8000514 <MCAL_GPIO_Init>
			usart_pins_config.GPIO_PinNumber = GPIO_PIN_14;
			MCAL_GPIO_Init(GPIOB, &usart_pins_config);
		}

	}
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	40010800 	.word	0x40010800
 8000980:	40004400 	.word	0x40004400
 8000984:	40004800 	.word	0x40004800
 8000988:	40010c00 	.word	0x40010c00

0800098c <MCAL_USART_SendData>:
*/

/*MY Function*/

void MCAL_USART_SendData(USART_TypeDef *USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	4613      	mov	r3, r2
 8000998:	71fb      	strb	r3, [r7, #7]
	//Wait until TXE is Empty in case of polling
	if (PollingEn == Polling_Enable)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d106      	bne.n	80009ae <MCAL_USART_SendData+0x22>
		while(((USARTx->SR &(1 << 7))>>7) == 0 );
 80009a0:	bf00      	nop
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <MCAL_USART_SendData+0x16>

	if (USARTx == USART1)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4a27      	ldr	r2, [pc, #156]	; (8000a50 <MCAL_USART_SendData+0xc4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d114      	bne.n	80009e0 <MCAL_USART_SendData+0x54>
				//Parity exist so only 8 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
			}
		}

		else if(Global_USART_Config[0].USART_WordLength == USART_8_DataBits)
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 80009b8:	7a1b      	ldrb	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d143      	bne.n	8000a46 <MCAL_USART_SendData+0xba>
		{
			if (Global_USART_Config[0].USART_Parity == USART_Parity_NONE)
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 80009c0:	7a5b      	ldrb	r3, [r3, #9]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d105      	bne.n	80009d2 <MCAL_USART_SendData+0x46>
			{
				//No parity so all 8 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	605a      	str	r2, [r3, #4]
				//Parity exist so only 7 bits will considered as data
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
			}
		}
	}
}
 80009d0:	e039      	b.n	8000a46 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	605a      	str	r2, [r3, #4]
}
 80009de:	e032      	b.n	8000a46 <MCAL_USART_SendData+0xba>
	else if (USARTx == USART2)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <MCAL_USART_SendData+0xcc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d114      	bne.n	8000a12 <MCAL_USART_SendData+0x86>
		else if(Global_USART_Config[1].USART_WordLength == USART_8_DataBits)
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 80009ea:	7f1b      	ldrb	r3, [r3, #28]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d12a      	bne.n	8000a46 <MCAL_USART_SendData+0xba>
			if (Global_USART_Config[1].USART_Parity == USART_Parity_NONE)
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 80009f2:	7f5b      	ldrb	r3, [r3, #29]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d105      	bne.n	8000a04 <MCAL_USART_SendData+0x78>
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	605a      	str	r2, [r3, #4]
}
 8000a02:	e020      	b.n	8000a46 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	e019      	b.n	8000a46 <MCAL_USART_SendData+0xba>
	else if (USARTx == USART3)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <MCAL_USART_SendData+0xd0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d115      	bne.n	8000a46 <MCAL_USART_SendData+0xba>
		else if(Global_USART_Config[2].USART_WordLength == USART_8_DataBits)
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 8000a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d110      	bne.n	8000a46 <MCAL_USART_SendData+0xba>
			if (Global_USART_Config[2].USART_Parity == USART_Parity_NONE)
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MCAL_USART_SendData+0xc8>)
 8000a26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d105      	bne.n	8000a3a <MCAL_USART_SendData+0xae>
				USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	605a      	str	r2, [r3, #4]
}
 8000a38:	e005      	b.n	8000a46 <MCAL_USART_SendData+0xba>
				USARTx->DR = (*pTxBuffer & (uint8_t)0x7F);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	605a      	str	r2, [r3, #4]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40013800 	.word	0x40013800
 8000a54:	2000005c 	.word	0x2000005c
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MCAL_USART_ReceiveData>:
 * @param [in] 	-PollingEn: Enum variable that provide polling capability to the Receiving function
 * @retval 		-none
 * Note			-Support only asynchronous and 8MHZ mode
 */
void MCAL_USART_ReceiveData(USART_TypeDef *USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	71fb      	strb	r3, [r7, #7]
	//Wait until RXNE is Empty in case of polling
	if (PollingEn == Polling_Enable)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d106      	bne.n	8000a82 <MCAL_USART_ReceiveData+0x22>
		while (((USARTx->SR &(1 << 5))>>5) == 0); //Wait for data to be Received
 8000a74:	bf00      	nop
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <MCAL_USART_ReceiveData+0x16>


	if(USARTx == USART1)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <MCAL_USART_ReceiveData+0xdc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d118      	bne.n	8000abc <MCAL_USART_ReceiveData+0x5c>
				//Parity exist so only 8 bits is considered as data
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
				//*(pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
			}
		}
		else if(Global_USART_Config[0].USART_WordLength == USART_8_DataBits)
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000a8c:	7a1b      	ldrb	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14f      	bne.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
		{
			if (Global_USART_Config[0].USART_Parity == USART_Parity_NONE)
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000a94:	7a5b      	ldrb	r3, [r3, #9]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <MCAL_USART_ReceiveData+0x4a>
			{
				//No parity so all 8 bits is considered as data
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	801a      	strh	r2, [r3, #0]
			}
		}
	}


}
 8000aa8:	e043      	b.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	801a      	strh	r2, [r3, #0]
}
 8000aba:	e03a      	b.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
	else if (USARTx == USART2)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <MCAL_USART_ReceiveData+0xe4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d118      	bne.n	8000af6 <MCAL_USART_ReceiveData+0x96>
		else if(Global_USART_Config[1].USART_WordLength == USART_8_DataBits)
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000ac6:	7f1b      	ldrb	r3, [r3, #28]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d132      	bne.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
			if (Global_USART_Config[1].USART_Parity == USART_Parity_NONE)
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000ace:	7f5b      	ldrb	r3, [r3, #29]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d107      	bne.n	8000ae4 <MCAL_USART_ReceiveData+0x84>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	801a      	strh	r2, [r3, #0]
}
 8000ae2:	e026      	b.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	801a      	strh	r2, [r3, #0]
}
 8000af4:	e01d      	b.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
	else if (USARTx == USART3)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MCAL_USART_ReceiveData+0xe8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d119      	bne.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
		else if(Global_USART_Config[2].USART_WordLength == USART_8_DataBits)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000b00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d114      	bne.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
			if (Global_USART_Config[2].USART_Parity == USART_Parity_NONE)
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MCAL_USART_ReceiveData+0xe0>)
 8000b0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d107      	bne.n	8000b22 <MCAL_USART_ReceiveData+0xc2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	801a      	strh	r2, [r3, #0]
}
 8000b20:	e007      	b.n	8000b32 <MCAL_USART_ReceiveData+0xd2>
				*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	801a      	strh	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	2000005c 	.word	0x2000005c
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40004800 	.word	0x40004800

08000b4c <USART1_IRQHandler>:
* ===========================================================================================
*/


void USART1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	Global_USART_Config[0].USART_IRQ_CallBack_Func();
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <USART1_IRQHandler+0x10>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4798      	blx	r3
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000005c 	.word	0x2000005c

08000b60 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	Global_USART_Config[1].USART_IRQ_CallBack_Func();
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <USART2_IRQHandler+0x10>)
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	4798      	blx	r3

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000005c 	.word	0x2000005c

08000b74 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	Global_USART_Config[2].USART_IRQ_CallBack_Func();
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <USART3_IRQHandler+0x10>)
 8000b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7c:	4798      	blx	r3
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000005c 	.word	0x2000005c

08000b88 <clock_init>:
#include "STM32F103C6T6_EXTI_Driver.h"
#include "STM32F103C6T6_UART_Driver.h"


void clock_init(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <clock_init+0x30>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <clock_init+0x30>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <clock_init+0x30>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <clock_init+0x30>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <clock_init+0x30>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <clock_init+0x30>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6193      	str	r3, [r2, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000

08000bbc <main>:

void MOSTAFA_UART_CALLBACK(void);
unsigned short ch;

int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
	clock_init();
 8000bc2:	f7ff ffe1 	bl	8000b88 <clock_init>

	USART_Config uart_config;

	uart_config.USART_BaudRate = USART_BaudRate_115200;
 8000bc6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bca:	60bb      	str	r3, [r7, #8]
	uart_config.USART_FlowCtrl = USART_FlowCtrl_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
	uart_config.USART_IRQ_Enable = USART_IRQ_Enable_RXNEIE_ORE;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	743b      	strb	r3, [r7, #16]
	uart_config.USART_IRQ_CallBack_Func = MOSTAFA_UART_CALLBACK;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <main+0x40>)
 8000bd6:	617b      	str	r3, [r7, #20]
	uart_config.USART_Parity = USART_Parity_NONE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	737b      	strb	r3, [r7, #13]
	uart_config.USART_WordLength = USART_8_DataBits;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	733b      	strb	r3, [r7, #12]
	uart_config.USART_StopBits = USART_StopBits_One;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73bb      	strb	r3, [r7, #14]
	uart_config.USART_MODE = USART_MODE_RX_TX;
 8000be4:	230c      	movs	r3, #12
 8000be6:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(USART1, &uart_config);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <main+0x44>)
 8000bee:	f7ff fd81 	bl	80006f4 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <main+0x44>)
 8000bf4:	f7ff fe60 	bl	80008b8 <MCAL_USART_GPIO_Set_Pins>

	while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x3c>
 8000bfa:	bf00      	nop
 8000bfc:	08000c05 	.word	0x08000c05
 8000c00:	40013800 	.word	0x40013800

08000c04 <MOSTAFA_UART_CALLBACK>:

	}
}

void MOSTAFA_UART_CALLBACK(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveData(USART1, &ch, Polling_Disable);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4905      	ldr	r1, [pc, #20]	; (8000c20 <MOSTAFA_UART_CALLBACK+0x1c>)
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MOSTAFA_UART_CALLBACK+0x20>)
 8000c0e:	f7ff ff27 	bl	8000a60 <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, Polling_Enable);
 8000c12:	2201      	movs	r2, #1
 8000c14:	4902      	ldr	r1, [pc, #8]	; (8000c20 <MOSTAFA_UART_CALLBACK+0x1c>)
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MOSTAFA_UART_CALLBACK+0x20>)
 8000c18:	f7ff feb8 	bl	800098c <MCAL_USART_SendData>

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000098 	.word	0x20000098
 8000c24:	40013800 	.word	0x40013800

08000c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopForever+0xe>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopForever+0x16>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c56:	f000 f811 	bl	8000c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5a:	f7ff ffaf 	bl	8000bbc <main>

08000c5e <LoopForever>:

LoopForever:
  b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   r0, =_estack
 8000c60:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c6c:	08000d04 	.word	0x08000d04
  ldr r2, =_sbss
 8000c70:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c74:	2000009c 	.word	0x2000009c

08000c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>
	...

08000c7c <__libc_init_array>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4d0c      	ldr	r5, [pc, #48]	; (8000cb4 <__libc_init_array+0x38>)
 8000c82:	4c0d      	ldr	r4, [pc, #52]	; (8000cb8 <__libc_init_array+0x3c>)
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	10a4      	asrs	r4, r4, #2
 8000c88:	42a6      	cmp	r6, r4
 8000c8a:	d109      	bne.n	8000ca0 <__libc_init_array+0x24>
 8000c8c:	f000 f81a 	bl	8000cc4 <_init>
 8000c90:	2600      	movs	r6, #0
 8000c92:	4d0a      	ldr	r5, [pc, #40]	; (8000cbc <__libc_init_array+0x40>)
 8000c94:	4c0a      	ldr	r4, [pc, #40]	; (8000cc0 <__libc_init_array+0x44>)
 8000c96:	1b64      	subs	r4, r4, r5
 8000c98:	10a4      	asrs	r4, r4, #2
 8000c9a:	42a6      	cmp	r6, r4
 8000c9c:	d105      	bne.n	8000caa <__libc_init_array+0x2e>
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca4:	4798      	blx	r3
 8000ca6:	3601      	adds	r6, #1
 8000ca8:	e7ee      	b.n	8000c88 <__libc_init_array+0xc>
 8000caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cae:	4798      	blx	r3
 8000cb0:	3601      	adds	r6, #1
 8000cb2:	e7f2      	b.n	8000c9a <__libc_init_array+0x1e>
 8000cb4:	08000cfc 	.word	0x08000cfc
 8000cb8:	08000cfc 	.word	0x08000cfc
 8000cbc:	08000cfc 	.word	0x08000cfc
 8000cc0:	08000d00 	.word	0x08000d00

08000cc4 <_init>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr

08000cd0 <_fini>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	bf00      	nop
 8000cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd6:	bc08      	pop	{r3}
 8000cd8:	469e      	mov	lr, r3
 8000cda:	4770      	bx	lr
